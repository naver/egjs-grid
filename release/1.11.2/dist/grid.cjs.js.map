{"version":3,"file":"grid.cjs.js","sources":["../src/consts.ts","../src/utils.ts","../src/ResizeWatcher.ts","../src/ContainerManager.ts","../src/ItemRenderer.ts","../src/GridItem.ts","../src/Grid.ts","../src/grids/MasonryGrid.ts","../src/grids/lib/dijkstra.ts","../src/grids/JustifiedGrid.ts","../src/grids/FrameGrid.ts","../src/grids/lib/BoxModel.ts","../src/grids/PackingGrid.ts","../src/index.ts","../src/index.cjs.ts"],"sourcesContent":["/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { GridOptions } from \"./types\";\n\nexport const DEFAULT_GRID_OPTIONS: Required<GridOptions> = {\n  horizontal: false,\n  useTransform: false,\n  percentage: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  gap: 0,\n  attributePrefix: \"data-grid-\",\n  resizeDebounce: 100,\n  maxResizeDebounce: 0,\n  autoResize: true,\n  preserveUIOnDestroy: false,\n  defaultDirection: \"end\",\n  externalContainerManager: null,\n  externalItemRenderer: null,\n  renderOnPropertyChange: true,\n  useFit: true,\n  outlineLength: 0,\n  outlineSize: 0,\n  useRoundedSize: true,\n  useResizeObserver: false,\n  observeChildren: false,\n};\n\nexport enum PROPERTY_TYPE {\n  PROPERTY = 1,\n  RENDER_PROPERTY = 2,\n}\nexport enum MOUNT_STATE {\n  UNCHECKED = 1,\n  UNMOUNTED = 2,\n  MOUNTED = 3,\n}\nexport enum UPDATE_STATE {\n  NEED_UPDATE = 1,\n  WAIT_LOADING = 2,\n  UPDATED = 3,\n}\n\nexport const GRID_PROPERTY_TYPES = {\n  gap: PROPERTY_TYPE.RENDER_PROPERTY,\n  defaultDirection: PROPERTY_TYPE.PROPERTY,\n  renderOnPropertyChange: PROPERTY_TYPE.PROPERTY,\n  preserveUIOnDestroy: PROPERTY_TYPE.PROPERTY,\n  useFit: PROPERTY_TYPE.PROPERTY,\n  outlineSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  outlineLength: PROPERTY_TYPE.RENDER_PROPERTY,\n};\n\nexport const GRID_METHODS = [\n  \"syncElements\",\n  \"updateItems\",\n  \"getItems\",\n  \"setItems\",\n  \"renderItems\",\n  \"getContainerInlineSize\",\n  \"getContainerElement\",\n] as const;\n\nexport const GRID_EVENTS = [\n  \"renderComplete\",\n  \"contentError\",\n] as const;\n\nexport const RECT_NAMES = {\n  horizontal: {\n    inlinePos: \"top\",\n    contentPos: \"left\",\n    inlineSize: \"height\",\n    contentSize: \"width\",\n  },\n  vertical: {\n    inlinePos: \"left\",\n    contentPos: \"top\",\n    inlineSize: \"width\",\n    contentSize: \"height\",\n  },\n} as const;\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"./Grid\";\nimport { GRID_METHODS, GRID_PROPERTY_TYPES, PROPERTY_TYPE } from \"./consts\";\nimport { GridItem } from \"./GridItem\";\nimport { ResizeWatcherEntry } from \"./ResizeWatcher\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getKeys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\nexport function getUpdatedItems(items: GridItem[], entries: ResizeWatcherEntry[]) {\n  const mountedItems = getMountedItems(items);\n\n  return diff(\n    entries.map((entry) => entry.target),\n    mountedItems.map((item) => item.element!),\n  ).maintained.filter(([prevIndex, nextIndex]) => {\n    const entrySize = entries[prevIndex].size!;\n    const item = items[nextIndex];\n\n    return entrySize.inlineSize !== item.computedInlineSize\n      || entrySize.blockSize !== item.computedContentSize;\n  }).map(([, nextIndex]) => items[nextIndex]);\n}\nexport function getMountedItems(items: GridItem[]) {\n  return items.filter((item) => item.element);\n}\nexport function getMountedElements(items: GridItem[]) {\n  return getMountedItems(items).map((item) => item.element!);\n}\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\nexport function isNumber(val: any): val is number {\n  return typeof val === \"number\";\n}\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\nexport function getDataAttributes(element: HTMLElement, attributePrefix: string) {\n  const dataAttributes: Record<string, string> = {};\n  const attributes = element.attributes;\n  const length = attributes.length;\n\n  for (let i = 0; i < length; ++i) {\n    const attribute = attributes[i];\n    const { name, value } = attribute;\n    if (name.indexOf(attributePrefix) === -1) {\n      continue;\n    }\n    dataAttributes[camelize(name.replace(attributePrefix, \"\"))] = value;\n  }\n\n  return dataAttributes;\n}\n\n/* Class Decorator */\nexport function GetterSetter(component: {\n  prototype: Grid<any>,\n  propertyTypes: typeof GRID_PROPERTY_TYPES,\n}) {\n  const {\n    prototype,\n    propertyTypes,\n  } = component;\n  for (const name in propertyTypes) {\n    const shouldRender = propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY;\n\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, name) || {};\n\n    const getter = descriptor.get || function get(this: Grid) {\n      return this.options[name];\n    };\n    const setter = descriptor.set || function set(this: Grid, value: any) {\n      const options = this.options;\n      const prevValue = options[name];\n\n      if (prevValue === value) {\n        return;\n      }\n      options[name] = value;\n\n      if (shouldRender && options.renderOnPropertyChange) {\n        this.scheduleRender();\n      }\n    };\n    const attributes: Record<string, any> = {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter,\n    };\n    Object.defineProperty(prototype, name, attributes);\n  }\n}\n\nexport function withMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n\nexport function range(length: number): number[] {\n  const arr: number[] = [];\n  for (let i = 0; i < length; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function getRangeCost(value: number, valueRange: number[]) {\n  return Math.max(value - valueRange[1], valueRange[0] - value, 0) + 1;\n}\n\n/**\n * Decorator that makes the method of grid available in the framework.\n * @ko 프레임워크에서 그리드의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Grid\n * @private\n * @example\n * ```js\n * import { withGridMethods } from \"@egjs/grid\";\n *\n * class Grid extends React.Component<Partial<GridProps & GridOptions>> {\n *   &#64;withGridMethods\n *   private grid: NativeGrid;\n * }\n * ```\n */\nexport const withGridMethods = withMethods(GRID_METHODS);\n","import Component from \"@egjs/component\";\nimport { SizeRect } from \"./types\";\nimport { isString } from \"./utils\";\n\nexport interface ResizeWatherOptions {\n  resizeDebounce?: number;\n  maxResizeDebounce?: number;\n  useResizeObserver?: boolean;\n  useWindowResize?: boolean;\n  watchDirection?: \"width\" | \"height\" | \"box\" | false;\n  rectBox?: \"border-box\" | \"content-box\";\n  childrenRectBox?: \"border-box\" | \"content-box\";\n}\n\nexport interface ResizeWatcherResizeEvent {\n  isResizeContainer: boolean;\n  childEntries: ResizeWatcherEntry[];\n}\n\nexport interface ResizeWatcherEntry {\n  target: Element;\n  size?: { inlineSize: number, blockSize: number };\n}\n\nexport class ResizeWatcher {\n  private _resizeTimer = 0;\n  private _maxResizeDebounceTimer = 0;\n  private _emitter: Component<{ resize: ResizeWatcherResizeEvent }>;\n  private _observer: ResizeObserver | null;\n  protected container: HTMLElement;\n  protected rect: SizeRect = { width: 0, height: 0 };\n  private _options!: Required<ResizeWatherOptions>;\n  private _updatedEntries: ResizeWatcherEntry[] = [];\n\n  constructor(container: HTMLElement | string, options: ResizeWatherOptions = {}) {\n    this._options = {\n      resizeDebounce: 100,\n      maxResizeDebounce: 0,\n      useResizeObserver: false,\n      useWindowResize: true,\n      watchDirection: false,\n      rectBox: \"content-box\",\n      childrenRectBox: \"border-box\",\n      ...options,\n    };\n\n    this.container = isString(container) ? document.querySelector<HTMLElement>(container)! : container;\n    this._init();\n  }\n  public getRect() {\n    return this.rect;\n  }\n  public setRect(rect: SizeRect) {\n    this.rect = { ...rect };\n  }\n  public resize() {\n    const container = this.container;\n\n    this.setRect(this._options.rectBox === \"border-box\" ? {\n      width: container.offsetWidth,\n      height: container.offsetHeight,\n    } : {\n      width: container.clientWidth,\n      height: container.clientHeight,\n    });\n  }\n  public observeChildren(children: Element[]) {\n    const observer = this._observer;\n\n    if (!observer) {\n      return;\n    }\n    const box = this._options.childrenRectBox;\n\n    children.forEach((element) => {\n      observer.observe(element, {\n        box,\n      });\n    });\n  }\n  public unobserveChildren(children: Element[]) {\n    const observer = this._observer;\n\n    if (!observer) {\n      return;\n    }\n    children.forEach((element) => {\n      observer.unobserve(element);\n    });\n  }\n  public listen(callback: (e: ResizeWatcherResizeEvent) => void) {\n    this._emitter.on(\"resize\", callback);\n    return this;\n  }\n  public destroy() {\n    this._observer?.disconnect();\n    if (this._options.useWindowResize) {\n      window.removeEventListener(\"resize\", this._onWindowResize);\n    }\n  }\n  private _init() {\n    const container = this.container;\n    const options = this._options;\n\n    this._emitter = new Component();\n    if (options.useResizeObserver && !!window.ResizeObserver) {\n      this._observer = new window.ResizeObserver(this._onObserve);\n      this._observer.observe(container, {\n        box: options.rectBox,\n      });\n    }\n    if (options.useWindowResize) {\n      window.addEventListener(\"resize\", this._onWindowResize);\n    }\n    this.resize();\n  }\n  private _onWindowResize = () => {\n    this._scheduleResize([{\n      target: this.container,\n    }]);\n  }\n  private _onObserve = (entries: ResizeObserverEntry[]) => {\n    const options = this._options;\n    const container = this.container;\n    const containerRectBox = options.rectBox;\n    const childrenRectBox = options.childrenRectBox;\n\n    this._scheduleResize(entries.map((entry) => {\n      const target = entry.target;\n      const rectBox = target === container ? containerRectBox : childrenRectBox;\n      let sizes = (rectBox === \"border-box\" ? entry.borderBoxSize : entry.contentBoxSize);\n\n      // Safari < 15.3\n      if (!sizes) {\n        const contentRect = entry.contentRect;\n\n        sizes = [{\n          inlineSize: contentRect.width,\n          blockSize: contentRect.height,\n        }];\n      }\n      return {\n        // not array in old browser\n        size: sizes[0] || sizes as any,\n        target: entry.target,\n      };\n    }));\n  }\n  private _scheduleResize = (entries: ResizeWatcherEntry[]) => {\n    const {\n      resizeDebounce,\n      maxResizeDebounce,\n    } = this._options;\n\n    const updatedEntries = this._updatedEntries;\n\n    updatedEntries.push(...entries);\n    this._updatedEntries = updatedEntries.filter((entry, index) => {\n      return updatedEntries.lastIndexOf(entry) === index;\n    });\n\n\n    if (!this._maxResizeDebounceTimer && maxResizeDebounce >= resizeDebounce) {\n      this._maxResizeDebounceTimer = window.setTimeout(this._onResize, maxResizeDebounce);\n    }\n    if (this._resizeTimer) {\n      clearTimeout(this._resizeTimer);\n      this._resizeTimer = 0;\n    }\n    this._resizeTimer = window.setTimeout(this._onResize, resizeDebounce);\n  }\n  private _onResize = () => {\n    clearTimeout(this._resizeTimer);\n    clearTimeout(this._maxResizeDebounceTimer);\n\n    this._maxResizeDebounceTimer = 0;\n    this._resizeTimer = 0;\n\n    const updated = this._updatedEntries;\n    const container = this.container;\n    let containerEntry!: ResizeWatcherEntry;\n    const childEntries = updated.filter((entry) => {\n      if (entry.target === container) {\n        containerEntry = entry;\n        return false;\n      } else {\n        return true;\n      }\n    });\n    const isResizeChildren = childEntries.length > 0;\n    let isResizeContainer = !!containerEntry;\n\n    if (isResizeContainer) {\n      const watchDirection = this._options.watchDirection;\n      const prevRect = this.rect;\n      const containerEntrySize = containerEntry.size;\n\n      if (containerEntrySize) {\n        // ResizeObserver\n        this.setRect({\n          width: containerEntrySize.inlineSize,\n          height: containerEntrySize.blockSize,\n        });\n      } else {\n        // window's resize event\n        this.resize();\n      }\n      const rect = this.rect;\n      const isWatchWidth = watchDirection === \"box\" || watchDirection === \"width\";\n      const isWatchHeight = watchDirection === \"box\" || watchDirection === \"height\";\n\n      isResizeContainer = !watchDirection\n        || (isWatchWidth && prevRect.width !== rect.width)\n        || (isWatchHeight && prevRect.height !== rect.height);\n    }\n    this._updatedEntries = [];\n\n    if (isResizeContainer || isResizeChildren) {\n      this._emitter.trigger(\"resize\", {\n        isResizeContainer,\n        childEntries,\n      });\n    }\n  }\n}\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Component from \"@egjs/component\";\nimport { DestroyOptions, SizeRect } from \"./types\";\nimport { ResizeWatcherResizeEvent, ResizeWatcher } from \"./ResizeWatcher\";\nimport { DEFAULT_GRID_OPTIONS, RECT_NAMES } from \"./consts\";\n\nexport interface ContainerManagerOptions {\n  horizontal?: boolean;\n  autoResize?: boolean;\n  resizeDebounce?: number;\n  maxResizeDebounce?: number;\n  useResizeObserver?: boolean;\n}\n\nexport interface ContainerManagerStatus {\n  rect: SizeRect;\n}\nexport interface ContainerManagerEvents {\n  resize: ResizeWatcherResizeEvent;\n}\nexport class ContainerManager extends Component<ContainerManagerEvents> {\n  protected options: Required<ContainerManagerOptions>;\n  protected orgCSSText: string;\n  private _watcher: ResizeWatcher;\n\n  constructor(protected container: HTMLElement, options: ContainerManagerOptions) {\n    super();\n    this.options = {\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      autoResize: DEFAULT_GRID_OPTIONS.autoResize,\n      resizeDebounce: DEFAULT_GRID_OPTIONS.resizeDebounce,\n      maxResizeDebounce: DEFAULT_GRID_OPTIONS.maxResizeDebounce,\n      useResizeObserver: DEFAULT_GRID_OPTIONS.useResizeObserver,\n      ...options,\n    };\n\n    this._init();\n  }\n  public resize() {\n    const container = this.container;\n\n    this.setRect({\n      width: container.clientWidth,\n      height: container.clientHeight,\n    });\n  }\n  public getRect() {\n    return this._watcher.getRect();\n  }\n  public observeChildren(children: Element[]) {\n    this._watcher.observeChildren(children);\n  }\n  public unobserveChildren(children: Element[]) {\n    this._watcher.unobserveChildren(children);\n  }\n  public setRect(rect: SizeRect) {\n    this._watcher.setRect(rect);\n  }\n  public getInlineSize() {\n    return this.getRect()[this._names.inlineSize];\n  }\n  public getContentSize() {\n    return this.getRect()[this._names.contentSize];\n  }\n  public getStatus() {\n    return { rect: this._watcher.getRect() };\n  }\n  public setStatus(status: ContainerManagerStatus) {\n    this.setRect(status.rect);\n    this.setContentSize(this.getContentSize());\n  }\n  public setContentSize(size: number) {\n    const sizeName = this.options.horizontal ? \"width\" : \"height\";\n    this.setRect({\n      ...this.getRect(),\n      [sizeName]: size,\n    });\n    this.container.style[sizeName] = `${size}px`;\n  }\n  public destroy(options: DestroyOptions = {}) {\n    this._watcher.destroy();\n\n    if (!options.preserveUI) {\n      this.container.style.cssText = this.orgCSSText;\n    }\n  }\n  private _init() {\n    const container = this.container;\n    const style = window.getComputedStyle(container);\n\n    this.orgCSSText = container.style.cssText;\n\n    if (style.position === \"static\") {\n      container.style.position = \"relative\";\n    }\n    const options = this.options;\n\n    this._watcher = new ResizeWatcher(container, {\n      useWindowResize: options.autoResize,\n      useResizeObserver: options.useResizeObserver,\n      resizeDebounce: options.resizeDebounce,\n      maxResizeDebounce: options.maxResizeDebounce,\n      watchDirection: options.useResizeObserver ? this._names.inlineSize : false,\n    }).listen(this._onResize);\n  }\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    this.trigger(\"resize\", e);\n  }\n  private get _names() {\n    return RECT_NAMES[this.options.horizontal ? \"horizontal\" : \"vertical\"];\n  }\n}\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { DEFAULT_GRID_OPTIONS, MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\nimport { GridItem } from \"./GridItem\";\nimport { DOMRect } from \"./types\";\nimport { getDataAttributes, getKeys } from \"./utils\";\n\nexport interface ItemRendererOptions {\n  attributePrefix?: string;\n  useTransform?: boolean;\n  horizontal?: boolean;\n  percentage?: Array<\"position\" | \"size\"> | boolean;\n  isEqualSize?: boolean;\n  isConstantSize?: boolean;\n  useRoundedSize?: boolean;\n}\nexport interface ItemRendererStatus {\n  initialRect: Required<DOMRect> | null;\n}\n\nexport class ItemRenderer {\n  protected options: Required<ItemRendererOptions>;\n  protected containerRect: DOMRect;\n  protected initialRect: Required<DOMRect> | null = null;\n  protected sizePercetage = false;\n  protected posPercetage = false;\n\n  constructor(options: ItemRendererOptions) {\n    this.options = {\n      attributePrefix: DEFAULT_GRID_OPTIONS.attributePrefix,\n      useTransform: DEFAULT_GRID_OPTIONS.useTransform,\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      percentage: DEFAULT_GRID_OPTIONS.percentage,\n      isEqualSize: DEFAULT_GRID_OPTIONS.isEqualSize,\n      isConstantSize: DEFAULT_GRID_OPTIONS.isConstantSize,\n      useRoundedSize: DEFAULT_GRID_OPTIONS.useRoundedSize,\n      ...options,\n    };\n    this._init();\n  }\n  public resize() {\n    this.initialRect = null;\n  }\n  public renderItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this._renderItem(item);\n    });\n  }\n  public getInlineSize() {\n    return this.containerRect[this.options.horizontal ? \"height\" : \"width\"]!;\n  }\n  public setContainerRect(rect: DOMRect) {\n    this.containerRect = rect;\n  }\n  public updateItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this._updateItem(item);\n    });\n  }\n  public getStatus(): ItemRendererStatus {\n    return {\n      initialRect: this.initialRect,\n    };\n  }\n  public setStatus(status: ItemRendererStatus) {\n    this.initialRect = status.initialRect;\n  }\n  private _init() {\n    const { percentage } = this.options;\n\n    let sizePercentage = false;\n    let posPercentage = false;\n\n    if (percentage === true) {\n      sizePercentage = true;\n      posPercentage = true;\n    } else if (percentage) {\n      if (percentage.indexOf(\"position\") > -1) {\n        posPercentage = true;\n      }\n      if (percentage.indexOf(\"size\") > -1) {\n        sizePercentage = true;\n      }\n    }\n\n    this.posPercetage = posPercentage;\n    this.sizePercetage = sizePercentage;\n  }\n  private _updateItem(item: GridItem) {\n    const { isEqualSize, isConstantSize, useRoundedSize } = this.options;\n    const initialRect = this.initialRect;\n    const { orgRect, element } = item;\n    const isLoading = item.updateState === UPDATE_STATE.WAIT_LOADING;\n    const hasOrgSize = orgRect && orgRect.width && orgRect.height;\n    let rect: Required<DOMRect>;\n\n    if (isEqualSize && initialRect) {\n      rect = initialRect;\n    } else if (isConstantSize && hasOrgSize && !isLoading) {\n      rect = orgRect;\n    } else if (!element) {\n      return;\n    } else {\n      rect = {\n        left: element.offsetLeft,\n        top: element.offsetTop,\n        width: 0,\n        height: 0,\n      };\n      if (useRoundedSize) {\n        rect.width = element.offsetWidth;\n        rect.height = element.offsetHeight;\n      } else {\n        const clientRect = element.getBoundingClientRect();\n\n        rect.width = clientRect.width;\n        rect.height = clientRect.height;\n      }\n    }\n    if (!item.isFirstUpdate || !hasOrgSize) {\n      item.orgRect = { ...rect };\n    }\n    item.rect = { ...rect };\n\n    if (item.element) {\n      item.mountState = MOUNT_STATE.MOUNTED;\n    }\n\n    if (item.updateState === UPDATE_STATE.NEED_UPDATE) {\n      item.updateState = UPDATE_STATE.UPDATED;\n      item.isFirstUpdate = true;\n    }\n    item.attributes = element ? getDataAttributes(element, this.options.attributePrefix) : {};\n\n    if (!isLoading && !this.initialRect) {\n      this.initialRect = { ...rect };\n    }\n\n    return rect;\n  }\n  private _renderItem(item: GridItem) {\n    const element = item.element;\n    const cssRect = item.cssRect;\n\n    if (!element || !cssRect) {\n      return;\n    }\n\n    const {\n      horizontal,\n      useTransform,\n    } = this.options;\n    const posPercentage = this.posPercetage;\n    const sizePercentage = this.sizePercetage;\n    const cssTexts: string[] = [\"position: absolute;\"];\n    const {\n      inlineSize: sizeName,\n      inlinePos: posName,\n    } = RECT_NAMES[horizontal ? \"horizontal\": \"vertical\"];\n    const inlineSize = this.getInlineSize();\n    let keys = getKeys(cssRect);\n\n    if (useTransform) {\n      keys = keys.filter((key) => key !== \"top\" && key !== \"left\");\n\n      cssTexts.push(`transform: `\n        + `translate(${cssRect.left || 0}px, ${cssRect.top || 0}px);`\n      );\n    }\n    cssTexts.push(...keys.map((name) => {\n      const value = cssRect[name]!;\n\n      if (\n        (name === sizeName && sizePercentage) ||\n        (name === posName && posPercentage)\n      ) {\n        return `${name}: ${(value / inlineSize) * 100}%;`;\n      }\n      return `${name}: ${value}px;`;\n    }));\n\n    element.style.cssText += cssTexts.join(\"\");\n  }\n}\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { DOMRect, GridRect } from \"./types\";\nimport { MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\n\n/**\n * @typedef\n * @memberof Grid.GridItem\n * @property - The item key. <ko>아이템 키.</ko>\n * @property - The element for the item. <ko>아이템에 있는 엘리먼트.</ko>\n * @property - State of whether the element has been added to the container. <ko>element가 container에 추가되었는지 상태.</ko>\n * @property - The update state of the element's rect. <ko>element의 rect의 업데이트 상태.</ko>\n * @property - Whether the element's rect was updated for the first time. <ko>처음으로 element의 rect를 업데이트 했는지 여부.</ko>\n * @property - Attributes set as `data-grid-` of element. <ko>element의 `data-grid-`으로 설정된 속성들.</ko>\n * @property - cssText of the first style when an element is added to the container. <ko>element가 container에 추가됐을 때 처음 style의 cssText.</ko>\n * @property - The element's rect before first rendering. <ko>처음 렌더링 하기 전 엘리먼트의 rect.</ko>\n * @property - The updated element's rect before rendering. <ko>렌더링 하기 전 업데이트 된 엘리먼트의 rect.</ko>\n * @property - The CSS rect of the item to be rendered by being applied to the Grid. <ko>Grid에 적용되어 렌더링을 하기 위한 item의 CSS rect</ko>\n * @property - Additional data of the item. <ko>item의 추가적인 데이터들.</ko>\n * @property - Grid ready data for rendering. <ko>렌더링을 하기 위한 grid의 준비 데이터.</ko>\n */\nexport interface GridItemStatus {\n  key?: string | number;\n  element?: HTMLElement | null;\n  mountState?: MOUNT_STATE;\n  updateState?: UPDATE_STATE;\n  isFirstUpdate?: boolean;\n  attributes?: Record<string, string>;\n  orgCSSText?: string;\n  orgRect?: Required<DOMRect>;\n  rect?: Required<DOMRect>;\n  cssRect?: DOMRect;\n  data?: Record<string, any>;\n  gridData?: Record<string, any>;\n}\n\n/**\n * @memberof Grid\n * @implements Grid.GridItem.GridItemStatus\n */\nclass GridItem {\n  public isUpdate = false;\n  public hasTransition = false;\n  public transitionDuration = \"\";\n  /**\n   * @constructor\n   * @param horizontal - Direction of the scroll movement. (true: horizontal, false: vertical) <ko>스크롤 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param itemStatus - Default status object of GridItem module. <ko>GridItem 모듈의 기본 status 객체.</ko>\n   */\n  constructor(\n    protected horizontal: boolean,\n    itemStatus: Partial<GridItemStatus> = {},\n  ) {\n    const element = itemStatus.element;\n    const status: Required<GridItemStatus> = {\n      key: \"\",\n      orgRect: { left: 0, top: 0, width: 0, height: 0 },\n      rect: { left: 0, top: 0, width: 0, height: 0 },\n      cssRect: {},\n      attributes: {},\n      data: {},\n      isFirstUpdate: false,\n      mountState: MOUNT_STATE.UNCHECKED,\n      updateState: UPDATE_STATE.NEED_UPDATE,\n      element: element || null,\n      orgCSSText: element?.style.cssText ?? \"\",\n      gridData: {},\n      ...itemStatus,\n    };\n\n    for (const name in status) {\n      this[name] = status[name];\n    }\n  }\n  /**\n   * The size in inline direction before first rendering. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko 첫 렌더링 되기 전의 inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#orgInlineSize\n   */\n  public get orgInlineSize() {\n    const name = this._names.inlineSize;\n\n    return this.orgRect[name] || this.rect[name];\n  }\n  /**\n   * The size in content direction before first rendering. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko 첫 렌더링 되기 전의 content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#orgContentSize\n   */\n  public get orgContentSize() {\n    const name = this._names.contentSize;\n\n    return this.orgRect[name] || this.rect[name];\n  }\n  /**\n   * The size in inline direction. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#inlineSize\n   */\n  public get inlineSize() {\n    return this.rect[this._names.inlineSize];\n  }\n  /**\n   * The size in content direction. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#contentSize\n   */\n  public get contentSize() {\n    return this.rect[this._names.contentSize];\n  }\n  /**\n   * The CSS size in inline direction applied to the Grid. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#cssInlineSize\n   */\n  public get cssInlineSize() {\n    return this.cssRect[this._names.inlineSize];\n  }\n  /**\n   * The CSS size in content direction applied to the Grid. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#cssContentSize\n   */\n  public get cssContentSize() {\n    return this.cssRect[this._names.contentSize];\n  }\n  /**\n   * The CSS pos in inline direction applied to the Grid. \"left\" if horizontal is false, \"top\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 포지션. horizontal이 false면 \"left\", 아니면 \"top\".\n   * @member Grid.GridItem#cssInlinePos\n   */\n  public get cssInlinePos() {\n    return this.cssRect[this._names.inlinePos];\n  }\n  /**\n   * The CSS pos in content direction applied to the Grid. \"top\" if horizontal is false, \"left\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 포지션. horizontal이 false면 \"top\", 아니면 \"left\".\n   * @member Grid.GridItem#cssContentPos\n   */\n  public get cssContentPos() {\n    return this.cssRect[this._names.contentPos];\n  }\n  public set cssInlinePos(inlinePos: number | undefined) {\n    this.cssRect[this._names.inlinePos] = inlinePos;\n  }\n  public set cssContentPos(contentPos: number | undefined) {\n    this.cssRect[this._names.contentPos] = contentPos;\n  }\n  public set cssInlineSize(inlineSize: number | undefined) {\n    this.cssRect[this._names.inlineSize] = inlineSize;\n  }\n  public set cssContentSize(contentSize: number | undefined) {\n    this.cssRect[this._names.contentSize] = contentSize;\n  }\n  /**\n   * Calculated size in the direction of the inline applied to the grid. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 계산된 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#computedInlineSize\n   */\n  public get computedInlineSize() {\n    const name = this._names.inlineSize;\n\n    return this.cssRect[name] || this.rect[name] || this.orgRect[name];\n  }\n  /**\n   * Calculated size in the direction of the content applied to the grid. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#computedContentSize\n   */\n  public get computedContentSize() {\n    const name = this._names.contentSize;\n\n    return this.cssRect[name] || this.rect[name] || this.orgRect[name];\n  }\n  /**\n   * Calculated position in the direction of the inline applied to the grid. \"left\" if horizontal is false, \"top\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 포지션. horizontal이 false면 \"left\", 아니면 \"top\".\n   * @member Grid.GridItem#computedInlinePos\n   */\n  public get computedInlinePos() {\n    const name = this._names.inlinePos;\n\n    return this.cssRect[name] ?? this.rect[name];\n  }\n  /**\n   * Calculated position in the direction of the content applied to the grid. \"top\" if horizontal is false, \"left\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 포지션. horizontal이 false면 \"top\", 아니면 \"left\".\n   * @member Grid.GridItem#computedContentPos\n   */\n  public get computedContentPos() {\n    const name = this._names.contentPos;\n\n    return this.cssRect[name] ?? this.rect[name];\n  }\n  /**\n   * Set CSS Rect through GridRect.\n   * @ko GridRect을 통해 CSS Rect를 설정한다.\n   * @param - The style for setting CSS rect. <ko>CSS rect를 설정하기 위한 스타일.</ko>\n   */\n  public setCSSGridRect(gridRect: GridRect) {\n    const names = RECT_NAMES[this.horizontal ? \"horizontal\" : \"vertical\"];\n\n    const rect: DOMRect = {};\n\n    for (const name in gridRect) {\n      rect[names[name]] = gridRect[name];\n    }\n    this.cssRect = rect;\n  }\n  /**\n   * Returns the status of the item.\n   * @ko 아이템의 상태를 반환한다.\n   */\n  public getStatus(): Required<GridItemStatus> {\n    return {\n      mountState: this.mountState,\n      updateState: this.updateState,\n      attributes: this.attributes,\n      orgCSSText: this.orgCSSText,\n      isFirstUpdate: this.isFirstUpdate,\n      element: null,\n      key: this.key,\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      gridData: this.gridData,\n      data: this.data,\n    };\n  }\n  /**\n   * Returns minimized status of the item.\n   * @ko 아이템의 간소화된 상태를 반환한다.\n   */\n  public getMinimizedStatus(): Partial<GridItemStatus> {\n    const status: Partial<GridItemStatus> = {\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      attributes: this.attributes,\n      gridData: this.gridData,\n    };\n\n    const {\n      key,\n      mountState,\n      updateState,\n      isFirstUpdate,\n      orgCSSText,\n    } = this;\n    if (typeof key !== \"undefined\") {\n      status.key = key;\n    }\n    if (mountState !== MOUNT_STATE.UNCHECKED) {\n      status.mountState = mountState;\n    }\n    if (updateState !== UPDATE_STATE.NEED_UPDATE) {\n      status.updateState = updateState;\n    }\n    if (isFirstUpdate) {\n      status.isFirstUpdate = true;\n    }\n    if (orgCSSText) {\n      status.orgCSSText = orgCSSText;\n    }\n    return status;\n  }\n  private get _names() {\n    return this.horizontal ? RECT_NAMES.horizontal : RECT_NAMES.vertical;\n  }\n}\n\ninterface GridItem extends Required<GridItemStatus> {\n}\nexport { GridItem };\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Component from \"@egjs/component\";\nimport { DEFAULT_GRID_OPTIONS, GRID_PROPERTY_TYPES, MOUNT_STATE, UPDATE_STATE } from \"./consts\";\nimport { ContainerManager } from \"./ContainerManager\";\nimport {\n  DestroyOptions, GridEvents, GridOptions,\n  GridOutlines, GridStatus, Properties, RenderOptions,\n  OnRenderComplete,\n} from \"./types\";\nimport ImReady from \"@egjs/imready\";\nimport { ItemRenderer } from \"./ItemRenderer\";\nimport { GetterSetter, getMountedElements, isNumber, isString, getUpdatedItems } from \"./utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { GridItem } from \"./GridItem\";\nimport { ResizeWatcherResizeEvent } from \"./ResizeWatcher\";\n\n/**\n * @extends eg.Component\n */\n@GetterSetter\nabstract class Grid<Options extends GridOptions = GridOptions> extends Component<GridEvents> {\n  public static defaultOptions: Required<GridOptions> = DEFAULT_GRID_OPTIONS;\n  public static propertyTypes = GRID_PROPERTY_TYPES;\n  public options: Required<Options>;\n  protected containerElement: HTMLElement;\n  protected containerManager: ContainerManager;\n  protected itemRenderer!: ItemRenderer;\n  protected items: GridItem[] = [];\n  protected outlines: GridOutlines = {\n    start: [],\n    end: [],\n  };\n  private _renderTimer = 0;\n  private _im: ImReady;\n\n  /**\n  * Apply the CSS rect of items to fit the Grid and calculate the outline.\n  * @ko  Grid에 맞게 아이템들의 CSS rect를 적용하고 outline을 계산한다.\n  * @abstract\n  * @method Grid#applyGrid\n  * @param {\"start\" | \"end\"} direcion - The direction to apply the Grid. (\"end\": start to end, \"start\": end to start) <ko>Grid를 적용할 방향. (\"end\": 시작에서 끝 방향, \"start\": 끝에서 시작 방향)</ko>\n  * @param {number[]} outline - The start outline to apply the Grid. <ko>Grid를 적용할 시작 outline.</ko>\n  */\n  public abstract applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines;\n\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the Grid module <ko>Grid 모듈의 옵션 객체</ko>\n   */\n  constructor(containerElement: HTMLElement | string, options: Partial<Options> = {}) {\n    super();\n\n    this.options = {\n      ...((this.constructor as typeof Grid)\n        .defaultOptions as Required<Options>),\n      ...options,\n    };\n\n    this.containerElement = isString(containerElement)\n      ? document.querySelector<HTMLElement>(containerElement)!\n      : containerElement;\n\n    const {\n      isEqualSize,\n      isConstantSize,\n      useTransform,\n      horizontal,\n      percentage,\n      externalContainerManager,\n      externalItemRenderer,\n      resizeDebounce,\n      maxResizeDebounce,\n      autoResize,\n      useRoundedSize,\n      useResizeObserver,\n    } = this.options;\n\n    // TODO: 테스트용 설정\n    this.containerManager = externalContainerManager!\n      || new ContainerManager(this.containerElement, {\n        horizontal,\n        resizeDebounce,\n        maxResizeDebounce,\n        autoResize,\n        useResizeObserver,\n      }).on(\"resize\", this._onResize);\n    this.itemRenderer = externalItemRenderer!\n      || new ItemRenderer({\n        useTransform,\n        isEqualSize,\n        isConstantSize,\n        percentage,\n        useRoundedSize,\n      });\n\n    this._init();\n  }\n  /**\n   * Return Container Element.\n   * @ko 컨테이너 엘리먼트를 반환한다.\n   */\n  public getContainerElement(): HTMLElement {\n    return this.containerElement;\n  }\n  /**\n   * Return items.\n   * @ko 아이템들을 반환한다.\n   */\n  public getItems(): GridItem[] {\n    return this.items;\n  }\n  /**\n   * Returns the children of the container element.\n   * @ko 컨테이너 엘리먼트의 children을 반환한다.\n   */\n  public getChildren(): HTMLElement[] {\n    return [].slice.call(this.containerElement.children);\n  }\n  /**\n   * Set items.\n   * @ko 아이템들을 설정한다.\n   * @param items - The items to set. <ko>설정할 아이템들</ko>\n   */\n  public setItems(items: GridItem[]): this {\n    const options = this.options;\n\n    if (options.useResizeObserver && options.observeChildren) {\n      const containerManager = this.containerManager;\n\n      containerManager.unobserveChildren(getMountedElements(this.items));\n      containerManager.observeChildren(getMountedElements(items));\n    }\n    this.items = items;\n    return this;\n  }\n  /**\n   * Gets the container's inline size. (\"width\" if horizontal is false, otherwise \"height\")\n   * @ko container의 inline 사이즈를 가져온다. (horizontal이 false면 \"width\", 아니면 \"height\")\n   */\n  public getContainerInlineSize(): number {\n    return this.containerManager.getInlineSize()!;\n  }\n  /**\n   * Returns the outlines of the start and end of the Grid.\n   * @ko Grid의 처음과 끝의 outline을 반환한다.\n   */\n  public getOutlines(): GridOutlines {\n    return this.outlines;\n  }\n  /**\n   * Set outlines.\n   * @ko 아웃라인을 설정한다.\n   * @param outlines - The outlines to set. <ko>설정할 아웃라인.</ko>\n   */\n  public setOutlines(outlines: GridOutlines) {\n    this.outlines = outlines;\n    return this;\n  }\n  /**\n   * When elements change, it synchronizes and renders items.\n   * @ko elements가 바뀐 경우 동기화를 하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public syncElements(options: RenderOptions = {}) {\n    const items = this.items;\n    const { horizontal } = this.options;\n    const elements: HTMLElement[] = this.getChildren();\n    const { added, maintained, changed, removed } = diff(this.items.map((item) => item.element!), elements);\n\n    const nextItems: GridItem[] = [];\n\n    maintained.forEach(([beforeIndex, afterIndex]) => {\n      nextItems[afterIndex] = items[beforeIndex];\n    });\n    added.forEach((index) => {\n      nextItems[index] = new GridItem(horizontal!, {\n        element: elements[index],\n      });\n    });\n\n    this.setItems(nextItems);\n\n    if (added.length || removed.length || changed.length) {\n      this.renderItems(options);\n    }\n    return this;\n  }\n  /**\n   * Update the size of the items and render them.\n   * @ko 아이템들의 사이즈를 업데이트하고 렌더링을 한다.\n   * @param - Items to be updated. <ko>업데이트할 아이템들.</ko>\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public updateItems(items: GridItem[] = this.items, options: RenderOptions = {}) {\n    const useOrgResize = options.useOrgResize;\n\n    items.forEach((item) => {\n      if (useOrgResize) {\n        const orgRect = item.orgRect;\n\n        orgRect.width = 0;\n        orgRect.height = 0;\n      }\n      item.updateState = UPDATE_STATE.NEED_UPDATE;\n    });\n    this.checkReady(options);\n    return this;\n  }\n  /**\n   * Rearrange items to fit the grid and render them. When rearrange is complete, the `renderComplete` event is fired.\n   * @ko grid에 맞게 아이템을 재배치하고 렌더링을 한다. 배치가 완료되면 `renderComplete` 이벤트가 발생한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   * @example\n   * ```js\n   * import { MasonryGrid } from \"@egjs/grid\";\n   * const grid = new MasonryGrid();\n   *\n   * grid.on(\"renderComplete\", e => {\n   *   console.log(e);\n   * });\n   * grid.renderItems();\n   * ```\n   */\n  public renderItems(options: RenderOptions = {}) {\n    this._renderItems(options);\n    return this;\n  }\n  /**\n   * Returns current status such as item's position, size. The returned status can be restored with the setStatus() method.\n   * @ko 아이템의 위치, 사이즈 등 현재 상태를 반환한다. 반환한 상태는 setStatus() 메서드로 복원할 수 있다.\n   * @param - Whether to minimize the status of the item. (default: false) <ko>item의 status를 최소화할지 여부. (default: false)</ko>\n   */\n  public getStatus(minimize?: boolean): GridStatus {\n    return {\n      outlines: this.outlines,\n      items: this.items.map((item) => minimize ? item.getMinimizedStatus() : item.getStatus()),\n      containerManager: this.containerManager.getStatus(),\n      itemRenderer: this.itemRenderer.getStatus(),\n    };\n  }\n  /**\n   * Set status of the Grid module with the status returned through a call to the getStatus() method.\n   * @ko getStatus() 메서드에 대한 호출을 통해 반환된 상태로 Grid 모듈의 상태를 설정한다.\n   */\n  public setStatus(status: GridStatus) {\n    const horizontal = this.options.horizontal;\n    const containerManager = this.containerManager;\n    const prevInlineSize = containerManager.getInlineSize();\n    const children = this.getChildren();\n\n    this.itemRenderer.setStatus(status.itemRenderer);\n    containerManager.setStatus(status.containerManager);\n    this.outlines = status.outlines;\n    this.items = status.items.map((item, i) => new GridItem(horizontal!, {\n      ...item,\n      element: children[i],\n    }));\n\n    this.itemRenderer.renderItems(this.items);\n\n    if (prevInlineSize !== containerManager.getInlineSize()) {\n      this.renderItems({\n        useResize: true,\n      });\n    } else {\n      window.setTimeout(() => {\n        this._renderComplete({\n          direction: this.defaultDirection,\n          mounted: this.items,\n          updated: [],\n          isResize: false,\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Get the inline size corresponding to outline.\n   * @ko outline에 해당하는 inline 사이즈를 구한다.\n   * @param items - Items to get outline size. <ko>outline 사이즈를 구하기 위한 아이템들.</ko>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public getComputedOutlineSize(items: GridItem[] = this.items) {\n    return this.options.outlineSize! || this.getContainerInlineSize();\n  }\n  /**\n   * Get the length corresponding to outline.\n   * @ko outline에 해당하는 length를 가져온다.\n   * @param items - Items to get outline length. <ko>outline length를 구하기 위한 아이템들.</ko>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public getComputedOutlineLength(items: GridItem[] = this.items): number {\n    return this.options.outlineLength! || 1;\n  }\n\n  /**\n   * Releases the instnace and events and returns the CSS of the container and elements.\n   * @ko 인스턴스와 이벤트를 해제하고 컨테이너와 엘리먼트들의 CSS를 되돌린다.\n   * @param Options for destroy. <ko>destory()를 위한 옵션</ko>\n   */\n  public destroy(options: DestroyOptions = {}) {\n    const {\n      preserveUI = this.options.preserveUIOnDestroy,\n    } = options;\n    this.containerManager.destroy({\n      preserveUI,\n    });\n\n    if (!preserveUI) {\n      this.items.forEach(({ element, orgCSSText }) => {\n        if (element) {\n          element.style.cssText = orgCSSText;\n        }\n      });\n    }\n\n    this._im?.destroy();\n  }\n\n  protected checkReady(options: RenderOptions = {}) {\n    // Grid: renderItems => checkReady => readyItems => applyGrid\n    const items = this.items;\n    const updated = items.filter((item) => item.element?.parentNode && item.updateState !== UPDATE_STATE.UPDATED);\n    const mounted = items.filter((item) => item.element?.parentNode && item.mountState !== MOUNT_STATE.MOUNTED);\n    const moreUpdated: GridItem[] = [];\n\n    mounted.filter((item) => {\n      if (item.hasTransition) {\n        return true;\n      } else {\n        const element = item.element!;\n        const transitionDuration = parseFloat(getComputedStyle(element).transitionDuration);\n\n        if (transitionDuration > 0) {\n          item.hasTransition = true;\n          item.transitionDuration = element.style.transitionDuration;\n          return true;\n        }\n      }\n      return false;\n    }).forEach((item) => {\n      item.element!.style.transitionDuration = \"0s\";\n    });\n    this._im?.destroy();\n    this._im = new ImReady({\n      prefix: this.options.attributePrefix,\n    }).on(\"preReadyElement\", (e) => {\n      updated[e.index].updateState = UPDATE_STATE.WAIT_LOADING;\n    }).on(\"preReady\", () => {\n      // reset org size\n      updated.forEach((item) => {\n        const hasOrgSize = item.orgRect.width && item.orgRect.height;\n        const hasCSSSize = item.cssRect.width || item.cssRect.height;\n\n        if (!hasOrgSize && hasCSSSize) {\n          item.element!.style.cssText = item.orgCSSText;\n        }\n      });\n      this.itemRenderer.updateItems(updated);\n      this.readyItems(mounted, updated, options);\n    }).on(\"readyElement\", (e) => {\n      const item = updated[e.index];\n\n      item.updateState = UPDATE_STATE.NEED_UPDATE;\n\n      // after preReady\n      if (e.isPreReadyOver) {\n        item.element!.style.cssText = item.orgCSSText;\n        this.itemRenderer.updateItems([item]);\n        this.readyItems([], [item], options);\n      }\n    }).on(\"error\", (e) => {\n      const item = updated[e.index];\n      /**\n       * This event is fired when an error occurs in the content.\n       * @ko 콘텐츠 로드에 에러가 날 때 발생하는 이벤트.\n       * @event Grid#contentError\n       * @param {Grid.OnContentError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       * @example\n       * ```js\n       * grid.on(\"contentError\", e => {\n       *   e.update();\n       * });\n       * ```\n      */\n      this.trigger(\"contentError\", {\n        element: e.element,\n        target: e.target,\n        item,\n        update: () => {\n          moreUpdated.push(item);\n        },\n      });\n    }).on(\"ready\", () => {\n      if (moreUpdated.length) {\n        this.updateItems(moreUpdated);\n      }\n    }).check(updated.map((item) => item.element!));\n  }\n\n  protected scheduleRender() {\n    this._clearRenderTimer();\n    this._renderTimer = window.setTimeout(() => {\n      this.renderItems();\n    });\n  }\n  protected fitOutlines(useFit = this.useFit) {\n    const outlines = this.outlines;\n    const startOutline = outlines.start;\n    const endOutline = outlines.end;\n    const outlineOffset = startOutline.length ? Math.min(...startOutline) : 0;\n\n    // If the outline is less than 0, a fit occurs forcibly.\n    if (!useFit && outlineOffset > 0) {\n      return;\n    }\n\n    outlines.start = startOutline.map((point) => point - outlineOffset);\n    outlines.end = endOutline.map((point) => point - outlineOffset);\n\n    this.items.forEach((item) => {\n      const contentPos = item.cssContentPos;\n\n      if (!isNumber(contentPos)) {\n        return;\n      }\n      item.cssContentPos = contentPos - outlineOffset;\n    });\n  }\n  protected readyItems(mounted: GridItem[], updated: GridItem[], options: RenderOptions) {\n    const prevOutlines = this.outlines;\n    const direction = options.direction || this.options.defaultDirection!;\n    const prevOutline = options.outline || prevOutlines[direction === \"end\" ? \"start\" : \"end\"];\n    const items = this.items;\n    let nextOutlines = {\n      start: [...prevOutline],\n      end: [...prevOutline],\n    };\n\n    mounted.forEach((item) => {\n      item.mountState = MOUNT_STATE.MOUNTED;\n    });\n    updated.forEach((item) => {\n      item.isUpdate = true;\n    });\n    if (items.length) {\n      nextOutlines = this.applyGrid(this.items, direction, prevOutline);\n    }\n    updated.forEach((item) => {\n      item.isUpdate = false;\n    });\n    this.setOutlines(nextOutlines);\n    this.fitOutlines();\n    this.itemRenderer.renderItems(this.items);\n    this._refreshContainerContentSize();\n\n    const transitionMounted = mounted.filter((item) => item.hasTransition);\n\n    if (transitionMounted.length) {\n      this.containerManager.resize();\n      transitionMounted.forEach((item) => {\n        const element = item.element!;\n\n        element.style.transitionDuration = item.transitionDuration;\n      });\n    }\n    this._renderComplete({\n      direction,\n      mounted,\n      updated,\n      isResize: !!options.useResize,\n    });\n  }\n  private _renderComplete(e: OnRenderComplete) {\n    /**\n     * This event is fired when the Grid has completed rendering.\n     * @ko Grid가 렌더링이 완료됐을 때  발생하는 이벤트이다.\n     * @event Grid#renderComplete\n     * @param {Grid.OnRenderComplete} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```js\n     * grid.on(\"renderComplete\", e => {\n     *   console.log(e.mounted, e.updated, e.useResize);\n     * });\n     * ```\n     */\n    this.trigger(\"renderComplete\", e);\n  }\n  private _clearRenderTimer() {\n    clearTimeout(this._renderTimer);\n    this._renderTimer = 0;\n  }\n  private _refreshContainerContentSize() {\n    const {\n      start: startOutline,\n      end: endOutline,\n    } = this.outlines;\n    const gap = this.options.gap!;\n\n    const endPoint = endOutline.length ? Math.max(...endOutline) : 0;\n    const startPoint = startOutline.length ? Math.max(...startOutline) : 0;\n    const contentSize = Math.max(startPoint, endPoint - gap);\n\n    this.containerManager.setContentSize(contentSize);\n  }\n  private _resizeContainer() {\n    this.containerManager.resize();\n    this.itemRenderer.setContainerRect(this.containerManager.getRect());\n  }\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    if (e.isResizeContainer) {\n      this._renderItems({\n        useResize: true,\n      }, true);\n    } else {\n      const updatedItems = getUpdatedItems(this.items, e.childEntries);\n\n      if (updatedItems.length > 0) {\n        this.updateItems(updatedItems);\n      }\n    }\n  }\n  private _init() {\n    this._resizeContainer();\n  }\n  private _renderItems(options: RenderOptions = {}, isTrusted?: boolean) {\n    this._clearRenderTimer();\n\n    const isResize = options.useResize || options.useOrgResize;\n\n\n    if (isResize && !isTrusted) {\n      // Resize container\n      // isTrusted has already been resized internally.\n      this._resizeContainer();\n      this.itemRenderer.resize();\n    }\n\n    if (!this.getItems().length && this.getChildren().length) {\n      this.syncElements(options);\n    } else if (isResize) {\n      // Update all items\n      this.updateItems(this.items, options);\n    } else {\n      // Update only items that need to be updated.\n      this.checkReady(options);\n    }\n  }\n}\n\ninterface Grid extends Properties<typeof Grid> { }\n\nexport default Grid;\n\n/**\n * Gap used to create space around items.\n * @ko 아이템들 사이의 공간.\n * @name Grid#gap\n * @type {$ts:Grid.GridOptions[\"gap\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   gap: 0,\n * });\n *\n * grid.gap = 5;\n * ```\n */\n\n/**\n * The default direction value when direction is not set in the render option.\n * @ko render옵션에서 direction을 미설정시의 기본 방향값.\n * @name Grid#defaultDirection\n * @type {$ts:Grid.GridOptions[\"defaultDirection\"]}\n * @default \"end\"\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   defaultDirection: \"end\",\n * });\n *\n * grid.defaultDirection = \"start\";\n * ```\n */\n\n\n/**\n * Whether to move the outline to 0 when the top is empty when rendering. However, if it overflows above the top, the outline is forced to 0. (default: true)\n * @ko 렌더링시 상단이 비어있을 때 아웃라인을 0으로 이동시킬지 여부. 하지만 상단보다 넘치는 경우 아웃라인을 0으로 강제 이동한다. (default: true)\n * @name Grid#useFit\n * @type {$ts:Grid.GridOptions[\"useFit\"]}\n * @default true\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   useFit: true,\n * });\n *\n * grid.useFit = false;\n * ```\n */\n\n/**\n * Whether to preserve the UI of the existing container or item when destroying.\n * @ko destroy 시 기존 컨테이너, 아이템의 UI를 보존할지 여부.\n * @name Grid#preserveUIOnDestroy\n * @type {$ts:Grid.GridOptions[\"preserveUIOnDestroy\"]}\n * @default false\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   preserveUIOnDestroy: false,\n * });\n *\n * grid.preserveUIOnDestroy = true;\n * ```\n */\n\n\n/**\n * The number of outlines. If the number of outlines is 0, it is calculated according to the type of grid.\n * @ko outline의 개수. 아웃라인의 개수가 0이라면 grid의 종류에 따라 계산이 된다.\n * @name Grid#outlineLength\n * @type {$ts:Grid.GridOptions[\"outlineLength\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   outlineLength: 0,\n *   outlineSize: 0,\n * });\n *\n * grid.outlineLength = 3;\n * ```\n */\n\n\n/**\n * The size of the outline. If the outline size is 0, it is calculated according to the grid type.\n * @ko outline의 사이즈. 만약 outline의 사이즈가 0이면, grid의 종류에 따라 계산이 된다.\n * @name Grid#outlineSize\n * @type {$ts:Grid.GridOptions[\"outlineSize\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   outlineLength: 0,\n *   outlineSize: 0,\n * });\n *\n * grid.outlineSize = 300;\n * ```\n */\n\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE, UPDATE_STATE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridAlign } from \"../types\";\nimport { range, GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\nfunction getColumnPoint(\n  outline: number[],\n  columnIndex: number,\n  columnCount: number,\n  pointCaculationName: \"max\" | \"min\",\n) {\n  return Math[pointCaculationName](...outline.slice(columnIndex, columnIndex + columnCount));\n}\n\nfunction getColumnIndex(outline: number[], columnCount: number, nearestCalculationName: \"max\" | \"min\") {\n  const length = outline.length - columnCount + 1;\n  const pointCaculationName = nearestCalculationName === \"max\" ? \"min\" : \"max\";\n  const indexCaculationName = nearestCalculationName === \"max\" ? \"lastIndexOf\" : \"indexOf\";\n  const points = range(length).map((index) => {\n    return getColumnPoint(outline, index, columnCount, pointCaculationName);\n  });\n\n  return points[indexCaculationName](Math[nearestCalculationName](...points));\n}\n\n/**\n * @typedef\n * @memberof Grid.MasonryGrid\n * @extends Grid.GridOptions\n * @property - The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container. Can be used instead of outlineLength. (default: 0)<ko>열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. outlineLength 대신 사용할 수 있다.(default: 0) </ko>\n * @property - The size of the columns. If it is 0, it is calculated as the size of the first item in items. Can be used instead of outlineSize. (default: 0) <ko> 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. outlineSize 대신 사용할 수 있다.(default: 0) </ko>\n * @property - The size ratio(inlineSize / contentSize) of the columns. 0 is not set. (default: 0) <ko>열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다. </ko>\n * @property - Align of the position of the items. If you want to use `stretch`, be sure to set `column`, `columnSize` or `maxStretchColumnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\") <ko>아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column`, `columnSize` 또는 `maxStretchColumnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\") (default: \"justify\")</ko>\n * @property - Difference Threshold for Counting Columns. Since offsetSize is calculated by rounding, the number of columns may not be accurate. (default: 1) <ko>칼럼 개수를 계산하기 위한 차이 임계값. offset 사이즈는 반올림으로 게산하기 때문에 정확하지 않을 수 있다. (default: 1)</ko>\n * @property - If stretch is used, the column can be automatically calculated by setting the maximum size of the column that can be stretched. (default: Infinity) <ko>stretch를 사용한 경우 최대로 늘릴 수 있는 column의 사이즈를 설정하여 column을 자동 계산할 수 있다. (default: Infinity)</ko>\n */\nexport interface MasonryGridOptions extends GridOptions {\n  column?: number;\n  columnSize?: number;\n  columnSizeRatio?: number;\n  align?: GridAlign;\n  columnCalculationThreshold?: number;\n  maxStretchColumnSize?: number;\n}\n\n/**\n * MasonryGrid is a grid that stacks items with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new item.\n * @ko MasonryGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 아이템를 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 아이템 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.MasonryGrid.MasonryGridOptions} options - The option object of the MasonryGrid module <ko>MasonryGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class MasonryGrid extends Grid<MasonryGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    column: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSizeRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    align: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnCalculationThreshold: PROPERTY_TYPE.RENDER_PROPERTY,\n    maxStretchColumnSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<MasonryGridOptions> = {\n    ...Grid.defaultOptions,\n    align: \"justify\",\n    column: 0,\n    columnSize: 0,\n    columnSizeRatio: 0,\n    columnCalculationThreshold: 0.5,\n    maxStretchColumnSize: Infinity,\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const columnSize = this.getComputedOutlineSize(items);\n    const column = this.getComputedOutlineLength(items);\n\n    const {\n      gap,\n      align,\n      columnSizeRatio,\n    } = this.options;\n    const outlineLength = outline.length;\n    const itemsLength = items.length;\n    const alignPoses = this._getAlignPoses(column, columnSize);\n    const isEndDirection = direction === \"end\";\n    const nearestCalculationName = isEndDirection ? \"min\" : \"max\";\n    const pointCalculationName = isEndDirection ? \"max\" : \"min\";\n    let startOutline = [0];\n\n    if (outlineLength === column) {\n      startOutline = outline.slice();\n    } else {\n      const point = outlineLength ? Math[pointCalculationName](...outline) : 0;\n\n      startOutline = range(column).map(() => point);\n    }\n    const endOutline = startOutline.slice();\n    const columnDist = column > 1 ? alignPoses[1] - alignPoses[0] : 0;\n    const isStretch = align === \"stretch\";\n\n    for (let i = 0; i < itemsLength; ++i) {\n      const item = items[isEndDirection ? i : itemsLength - 1 - i];\n      const columnAttribute = parseInt(item.attributes.column || \"1\", 10);\n      const maxColumnAttribute = parseInt(item.attributes.maxColumn || \"1\", 10);\n      let contentSize = item.contentSize;\n      let columnCount = Math.min(\n        column,\n        columnAttribute || Math.max(1, Math.ceil((item.inlineSize + gap) / columnDist)),\n      );\n      const maxColumnCount = Math.min(column, Math.max(columnCount, maxColumnAttribute));\n      let columnIndex = getColumnIndex(endOutline, columnCount, nearestCalculationName);\n      let contentPos = getColumnPoint(endOutline, columnIndex, columnCount, pointCalculationName);\n\n      while (columnCount < maxColumnCount) {\n        const nextEndColumnIndex = columnIndex + columnCount;\n        const nextColumnIndex = columnIndex - 1;\n\n        if (isEndDirection && (nextEndColumnIndex >= column || endOutline[nextEndColumnIndex] > contentPos)) {\n          break;\n        }\n        if (!isEndDirection && (nextColumnIndex < 0 || endOutline[nextColumnIndex]) < contentPos) {\n          break;\n        }\n        if (!isEndDirection) {\n          --columnIndex;\n        }\n        ++columnCount;\n      }\n\n      columnIndex = Math.max(0, columnIndex);\n      columnCount = Math.min(column - columnIndex, columnCount);\n\n      // stretch mode or data-grid-column > \"1\"\n      if ((columnAttribute > 0 && columnCount > 1) || isStretch) {\n        item.cssInlineSize = (columnCount - 1) * columnDist + columnSize;\n      }\n      if (columnSizeRatio > 0) {\n        contentSize = item.computedInlineSize / columnSizeRatio;\n        item.cssContentSize = contentSize;\n      }\n      const inlinePos = alignPoses[columnIndex];\n      contentPos = isEndDirection ? contentPos : contentPos - gap - contentSize;\n\n      item.cssInlinePos = inlinePos;\n      item.cssContentPos = contentPos;\n      const nextOutlinePoint = isEndDirection ? contentPos + contentSize + gap : contentPos;\n\n      range(columnCount).forEach((indexOffset) => {\n        endOutline[columnIndex + indexOffset] = nextOutlinePoint;\n      });\n    }\n\n    // if end items, startOutline is low, endOutline is high\n    // if start items, startOutline is high, endOutline is low\n    return {\n      start: isEndDirection ? startOutline : endOutline,\n      end: isEndDirection ? endOutline : startOutline,\n    };\n  }\n  public getComputedOutlineSize(items = this.items) {\n    const {\n      gap,\n      align,\n    } = this.options;\n    const containerInlineSize = this.getContainerInlineSize();\n    const columnSizeOption = this.columnSize || this.outlineSize;\n    const columnOption = this.column || this.outlineLength;\n    let column = columnOption || 1;\n\n    let columnSize = 0;\n\n    if (align === \"stretch\") {\n      if (!columnOption) {\n        const maxStretchColumnSize = this.maxStretchColumnSize || Infinity;\n\n        column = Math.max(1, Math.ceil((containerInlineSize + gap) / (maxStretchColumnSize + gap)));\n      }\n      columnSize = (containerInlineSize + gap) / (column || 1) - gap;\n    } else if (columnSizeOption) {\n      columnSize = columnSizeOption;\n    } else if (items.length) {\n      let checkedItem = items[0];\n\n      for (const item of items) {\n        const attributes = item.attributes;\n        if (\n          item.updateState !== UPDATE_STATE.UPDATED\n          || !item.inlineSize\n          || attributes.column\n          || attributes.maxColumnCount\n        ) {\n          continue;\n        }\n        checkedItem = item;\n        break;\n      }\n      const inlineSize = checkedItem.inlineSize || 0;\n\n      columnSize = inlineSize;\n    } else {\n      columnSize = containerInlineSize;\n    }\n    return columnSize || 0;\n  }\n  public getComputedOutlineLength(items = this.items) {\n    const gap = this.gap;\n    const columnOption = this.column || this.outlineLength;\n    const columnCalculationThreshold = this.columnCalculationThreshold;\n    let column = 1;\n\n    if (columnOption) {\n      column = columnOption;\n    } else {\n      const columnSize = this.getComputedOutlineSize(items);\n\n      column = Math.min(\n        items.length,\n        Math.max(1, Math.floor((this.getContainerInlineSize() + gap)\n          / (columnSize - columnCalculationThreshold + gap))),\n      );\n    }\n    return column;\n  }\n  private _getAlignPoses(column: number, columnSize: number) {\n    const {\n      align,\n      gap,\n    } = this.options;\n    const containerSize = this.getContainerInlineSize();\n    const indexes = range(column);\n\n    let offset = 0;\n    let dist = 0;\n\n    if (align === \"justify\" || align === \"stretch\") {\n      const countDist = column - 1;\n\n      dist = countDist ? Math.max((containerSize - columnSize) / countDist, columnSize + gap) : 0;\n      offset = Math.min(0, containerSize / 2 - (countDist * dist + columnSize) / 2);\n    } else {\n      dist = columnSize + gap;\n      const totalColumnSize = (column - 1) * dist + columnSize;\n\n      if (align === \"center\") {\n        offset = (containerSize - totalColumnSize) / 2;\n      } else if (align === \"end\") {\n        offset = containerSize - totalColumnSize;\n      }\n    }\n    return indexes.map((i) => {\n      return offset + i * dist;\n    });\n  }\n}\n\nexport interface MasonryGrid extends Properties<typeof MasonryGrid> {\n}\n\n\n/**\n * Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\")\n * @ko 아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\")\n * @name Grid.MasonryGrid#align\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"align\"]}\n * @default \"justify\"\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   align: \"start\",\n * });\n *\n * grid.align = \"justify\";\n * ```\n */\n\n\n/**\n * The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container.  Can be used instead of outlineLength.\n * @ko 열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. outlineLength 대신 사용할 수 있다.\n * @name Grid.MasonryGrid#column\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"column\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   column: 0,\n * });\n *\n * grid.column = 4;\n * ```\n */\n\n\n/**\n * The size of the columns. If it is 0, it is calculated as the size of the first item in items. Can be used instead of outlineSize.\n * @ko 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. outlineSize 대신 사용할 수 있다.\n * @name Grid.MasonryGrid#columnSize\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSize\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSize: 0,\n * });\n *\n * grid.columnSize = 200;\n * ```\n */\n\n\n/**\n * The size ratio(inlineSize / contentSize) of the columns. 0 is not set.\n * @ko 열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다.\n * @name Grid.MasonryGrid#columnSizeRatio\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSizeRatio\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSizeRatio: 0,\n * });\n *\n * grid.columnSizeRatio = 0.5;\n * ```\n */\n\n\n/**\n * If stretch is used, the column can be automatically calculated by setting the maximum size of the column that can be stretched.\n * @ko stretch를 사용한 경우 최대로 늘릴 수 있는 column의 사이즈를 설정하여 column을 자동 계산할 수 있다.\n * @name Grid.MasonryGrid#maxStretchColumnSize\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"maxStretchColumnSize\"]}\n * @default Infinity\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   align: \"stretch\",\n *   maxStretchColumnSize: 0,\n * });\n *\n * grid.maxStretchColumnSize = 400;\n * ```\n */\n","/* eslint-disable */\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nfunction single_source_shortest_paths(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\t// Predecessor map for each node that has been encountered.\n\t// node ID => predecessor node ID\n\tconst predecessors: { [key: string]: string } = {};\n\t// Costs of shortest paths from s to all nodes encountered.\n\t// node ID => cost\n\tconst costs: { [key: string]: number } = {};\n\tcosts[s] = 0;\n\n\t// Costs of shortest paths from s to all nodes encountered; differs from\n\t// `costs` in that it provides easy access to the node that currently has\n\t// the known shortest path from s.\n\t// XXX: Do we actually need both `costs` and `open`?\n\tconst open = new BinaryHeap<{ value: string, cost: number }>(x => x.cost);\n\topen.push({ value: s, cost: 0 });\n\n\tlet closest;\n\tlet u;\n\tlet cost_of_s_to_u;\n\tlet adjacent_nodes;\n\tlet cost_of_e;\n\tlet cost_of_s_to_u_plus_cost_of_e;\n\tlet cost_of_s_to_v;\n\tlet first_visit: boolean;\n\n\twhile (open.size()) {\n\t\t// In the nodes remaining in graph that have a known cost from s,\n\t\t// find the node, u, that currently has the shortest path from s.\n\t\tclosest = open.pop();\n\t\tu = closest.value;\n\t\tcost_of_s_to_u = closest.cost;\n\n\t\t// Get nodes adjacent to u...\n\t\tadjacent_nodes = graph(u) || {};\n\n\t\t// ...and explore the edges that connect u to those nodes, updating\n\t\t// the cost of the shortest paths to any or all of those nodes as\n\t\t// necessary. v is the node across the current edge from u.\n\t\tfor (const v in adjacent_nodes) {\n\t\t\t// Get the cost of the edge running from u to v.\n\t\t\tcost_of_e = adjacent_nodes[v];\n\n\t\t\t// Cost of s to u plus the cost of u to v across e--this is *a*\n\t\t\t// cost from s to v that may or may not be less than the current\n\t\t\t// known cost to v.\n\t\t\tcost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n\t\t\t// If we haven't visited v yet OR if the current known cost from s to\n\t\t\t// v is greater than the new cost we just found (cost of s to u plus\n\t\t\t// cost of u to v across e), update v's cost in the cost list and\n\t\t\t// update v's predecessor in the predecessor list (it's now u).\n\t\t\tcost_of_s_to_v = costs[v];\n\t\t\tfirst_visit = (typeof costs[v] === \"undefined\");\n\t\t\tif (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n\t\t\t\tcosts[v] = cost_of_s_to_u_plus_cost_of_e;\n\t\t\t\topen.push({ value: v, cost: cost_of_s_to_u_plus_cost_of_e });\n\t\t\t\tpredecessors[v] = u;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof costs[d] === \"undefined\") {\n\t\tconst msg = [\"Could not find a path from \", s, \" to \", d, \".\"].join(\"\");\n\t\tthrow new Error(msg);\n\t}\n\n\treturn predecessors;\n}\nfunction extract_shortest_path_from_predecessor_list(\n\tpredecessors: { [key: string]: string },\n\td: string,\n) {\n\tconst nodes: string[] = [];\n\tlet u = d;\n\n\twhile (u) {\n\t\tnodes.push(u);\n\t\tu = predecessors[u];\n\t}\n\tnodes.reverse();\n\treturn nodes;\n}\nfunction find_path(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\tconst predecessors = single_source_shortest_paths(graph, s, d);\n\n\treturn extract_shortest_path_from_predecessor_list(predecessors, d);\n}\n\nclass BinaryHeap<T> {\n\tprivate content: T[];\n\tprivate scoreFunction: (x: T) => number;\n\n\tconstructor(scoreFunction: (x: T) => number) {\n\t\tthis.content = [];\n\t\tthis.scoreFunction = scoreFunction;\n\t}\n\tpublic push(element: T) {\n\t\t// Add the new element to the end of the array.\n\t\tthis.content.push(element);\n\t\t// Allow it to bubble up.\n\t\tthis.bubbleUp(this.content.length - 1);\n\t}\n\tpublic pop() {\n\t\t// Store the first element so we can return it later.\n\t\tconst result = this.content[0];\n\t\t// Get the element at the end of the array.\n\t\tconst end = this.content.pop()!;\n\t\t// If there are any elements left, put the end element at the\n\t\t// start, and let it sink down.\n\t\tif (this.content.length > 0) {\n\t\t\tthis.content[0] = end;\n\t\t\tthis.sinkDown(0);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic size() {\n\t\treturn this.content.length;\n\t}\n\tpublic bubbleUp(_n: number) {\n\t\tlet n = _n;\n\t\t// Fetch the element that has to be moved.\n\t\tconst element = this.content[n];\n\t\t// When at 0, an element can not go up any further.\n\t\twhile (n > 0) {\n\t\t\t// Compute the parent element's index, and fetch it.\n\t\t\tconst parentN = Math.floor((n + 1) / 2) - 1;\n\t\t\tconst parent = this.content[parentN];\n\n\t\t\t// Swap the elements if the parent is greater.\n\t\t\tif (this.scoreFunction(element) < this.scoreFunction(parent)) {\n\t\t\t\tthis.content[parentN] = element;\n\t\t\t\tthis.content[n] = parent;\n\t\t\t\t// Update 'n' to continue at the new position.\n\t\t\t\tn = parentN;\n\t\t\t} else {\n\t\t\t\t// Found a parent that is less, no need to move it further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tpublic sinkDown(n: number) {\n\t\t// Look up the target element and its score.\n\t\tconst length = this.content.length;\n\t\tconst element = this.content[n];\n\t\tconst elemScore = this.scoreFunction(element);\n\t\tlet child1Score;\n\n\t\twhile (true) {\n\t\t\t// Compute the indices of the child elements.\n\t\t\tconst child2N = (n + 1) * 2;\n\t\t\tconst child1N = child2N - 1;\n\t\t\t// This is used to store the new position of the element,\n\t\t\t// if any.\n\t\t\tlet swap: number | null = null;\n\t\t\t// If the first child exists (is inside the array)...\n\t\t\tif (child1N < length) {\n\t\t\t\t// Look it up and compute its score.\n\t\t\t\tconst child1 = this.content[child1N];\n\t\t\t\tchild1Score = this.scoreFunction(child1);\n\t\t\t\t// If the score is less than our element's, we need to swap.\n\t\t\t\tif (child1Score < elemScore) {\n\t\t\t\t\tswap = child1N;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Do the same checks for the other child.\n\t\t\tif (child2N < length) {\n\t\t\t\tconst child2 = this.content[child2N];\n\t\t\t\tconst child2Score = this.scoreFunction(child2);\n\n\t\t\t\tif (child2Score < (swap == null ? elemScore : child1Score)) {\n\t\t\t\t\tswap = child2N;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the element needs to be moved, swap it, and continue.\n\t\t\tif (swap !== null) {\n\t\t\t\tthis.content[n] = this.content[swap];\n\t\t\t\tthis.content[swap] = element;\n\t\t\t\tn = swap;\n\t\t\t} else {\n\t\t\t\t// Otherwise, we are done.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport { find_path };\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { MOUNT_STATE, PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines } from \"../types\";\nimport { getRangeCost, GetterSetter, isObject } from \"../utils\";\nimport { find_path } from \"./lib/dijkstra\";\nimport { GridItem } from \"../GridItem\";\n\n\ninterface Link {\n  path: number[];\n  cost: number;\n  length: number;\n  currentNode: number;\n  isOver?: boolean;\n}\n\nfunction splitItems(items: GridItem[], path: string[]) {\n  const length = path.length;\n  const groups: GridItem[][] = [];\n\n  for (let i = 0; i < length - 1; ++i) {\n    const path1 = parseInt(path[i], 10);\n    const path2 = parseInt(path[i + 1], 10);\n\n    groups.push(items.slice(path1, path2));\n  }\n  return groups;\n}\nfunction getExpectedColumnSize(item: GridItem, rowSize: number) {\n  const inlineSize = item.orgInlineSize;\n  const contentSize = item.orgContentSize;\n\n  if (!inlineSize || !contentSize) {\n    return rowSize;\n  }\n  const inlineOffset = parseFloat(item.gridData.inlineOffset) || 0;\n  const contentOffset = parseFloat(item.gridData.contentOffset) || 0;\n  const ratio = contentSize <= contentOffset ? 1 : (inlineSize - inlineOffset) / (contentSize - contentOffset);\n\n  return ratio * (rowSize - contentOffset) + inlineOffset;\n}\n\n/**\n * @typedef\n * @memberof Grid.JustifiedGrid\n * @extends Grid.GridOptions\n * @property - The minimum and maximum number of items per line. (default: [1, 8]) <ko> 한 줄에 들어가는 아이템의 최소, 최대 개수. (default: [1, 8]) </ko>\n * @property - The minimum and maximum number of rows in a group, 0 is not set. (default: 0) <ko> 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다. (default: 0) </ko>\n * @property - The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes. (default: [0, Infinity]) <ko>아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다. (default: [0, Infinity])</ko>\n * @property - Maximum number of rows to be counted for container size. You can hide it on the screen by setting overflow: hidden. -1 is not set. (default: -1)<ko>컨테이너 크기에 계산될 최대 row 개수. overflow: hidden을 설정하면 화면에 가릴 수 있다. -1은 미설정이다. (default: -1)</ko>\n * @property - Whether to crop when the row size is out of sizeRange. If set to true, this ratio can be broken. (default: false) <ko>row사이즈가 sizeRange에 벗어나면 크롭할지 여부. true로 설정하면 비율이 깨질 수 있다. (default: false)</ko>\n */\nexport interface JustifiedGridOptions extends GridOptions {\n  columnRange?: number | number[];\n  rowRange?: number | number[];\n  sizeRange?: number | number[];\n  displayedRow?: number;\n  isCroppedSize?: boolean;\n}\n\n/**\n * 'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedGrid is a grid that the item is filled up on the basis of a line given a size.\n * If 'data-grid-inline-offset' or 'data-grid-content-offset' are set for item element, the ratio is maintained except for the offset value.\n * If 'data-grid-maintained-target' is set for an element whose ratio is to be maintained, the item is rendered while maintaining the ratio of the element.\n * @ko 'justified'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. JustifiedGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템가 가득 차도록 배치하는 Grid다.\n * 아이템 엘리먼트에 'data-grid-inline-offset' 또는 'data-grid-content-offset'를 설정하면 offset 값을 제외하고 비율을 유지한다.\n * 비율을 유지하고 싶은 엘리먼트에 'data-grid-maintained-target'을 설정한다면 해당 엘리먼트의 비율을 유지하면서 아이템이 렌더링이 된다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.JustifiedGrid.JustifiedGridOptions} options - The option object of the JustifiedGrid module <ko>JustifiedGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class JustifiedGrid extends Grid<JustifiedGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    columnRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    rowRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    isCroppedSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    displayedRow: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<JustifiedGridOptions> = {\n    ...Grid.defaultOptions,\n    columnRange: [1, 8],\n    rowRange: 0,\n    sizeRange: [0, Infinity],\n    displayedRow: -1,\n    isCroppedSize: false,\n  };\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const {\n      attributePrefix,\n      horizontal,\n    } = this.options;\n\n    items.forEach((item) => {\n      if (!item.isUpdate) {\n        return;\n      }\n      const element = item.element;\n      const attributes = item.attributes;\n      const gridData = item.gridData;\n      let inlineOffset = parseFloat(attributes.inlineOffset) || gridData.inlineOffset || 0;\n      let contentOffset = parseFloat(attributes.contentOffset) || gridData.contentOffset | 0;\n\n      if (\n        element && !(\"inlineOffset\" in attributes) && !(\"contentOffset\" in attributes)\n        && item.mountState === MOUNT_STATE.MOUNTED\n      ) {\n        const maintainedTarget = element.querySelector(`[${attributePrefix}maintained-target]`);\n\n        if (maintainedTarget) {\n          const widthOffset = element.offsetWidth - element.clientWidth\n            + element.scrollWidth - maintainedTarget.clientWidth;\n          const heightOffset = element.offsetHeight - element.clientHeight\n            + element.scrollHeight - maintainedTarget.clientHeight;\n\n          if (horizontal) {\n            inlineOffset = heightOffset;\n            contentOffset = widthOffset;\n          } else {\n            inlineOffset = widthOffset;\n            contentOffset = heightOffset;\n          }\n        }\n      }\n      gridData.inlineOffset = inlineOffset;\n      gridData.contentOffset = contentOffset;\n    });\n    const rowRange = this.options.rowRange;\n    let path: string[] = [];\n\n    if (items.length) {\n      path = rowRange ? this._getRowPath(items) : this._getPath(items);\n    }\n\n    return this._setStyle(items, path, outline, direction === \"end\");\n  }\n  private _getRowPath(items: GridItem[]) {\n    const columnRange = this._getColumnRange();\n    const rowRange = this._getRowRange();\n\n    const pathLink = this._getRowLink(items, {\n      path: [0],\n      cost: 0,\n      length: 0,\n      currentNode: 0,\n    }, columnRange, rowRange);\n\n    return pathLink?.path.map((node) => `${node}`) ?? [];\n  }\n  private _getRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    columnRange: number[],\n    rowRange: number[]\n  ): Link {\n    const [minColumn] = columnRange;\n    const [minRow, maxRow] = rowRange;\n    const lastNode = items.length;\n    const {\n      path,\n      length: pathLength,\n      cost,\n      currentNode,\n    } = currentLink;\n\n    // not reached lastNode but path is exceed or the number of remaining nodes is less than minColumn.\n    if (currentNode < lastNode && (maxRow <= pathLength || currentNode + minColumn > lastNode)) {\n      const rangeCost = getRangeCost(lastNode - currentNode, columnRange);\n      const lastCost = rangeCost * Math.abs(this._getCost(items, currentNode, lastNode));\n\n      return {\n        ...currentLink,\n        length: pathLength + 1,\n        path: [...path, lastNode],\n        currentNode: lastNode,\n        cost: cost + lastCost,\n        isOver: true,\n      };\n    } else if (currentNode >= lastNode) {\n      return {\n        ...currentLink,\n        currentNode: lastNode,\n        isOver: minRow > pathLength || maxRow < pathLength,\n      };\n    } else {\n      return this._searchRowLink(items, currentLink, lastNode, columnRange, rowRange);\n    }\n\n  }\n  private _searchRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    lastNode: number,\n    columnRange: number[],\n    rowRange: number[]\n  ) {\n    const [minColumn, maxColumn] = columnRange;\n    const {\n      currentNode,\n      path,\n      length: pathLength,\n      cost,\n    } = currentLink;\n    const length = Math.min(lastNode, currentNode + maxColumn);\n    const links: Link[] = [];\n\n    for (let nextNode = currentNode + minColumn; nextNode <= length; ++nextNode) {\n      if (nextNode === currentNode) {\n        continue;\n      }\n      const nextCost = Math.abs(this._getCost(items, currentNode, nextNode));\n      const nextLink = this._getRowLink(items, {\n        path: [...path, nextNode],\n        length: pathLength + 1,\n        cost: cost + nextCost,\n        currentNode: nextNode,\n      }, columnRange, rowRange);\n\n      if (nextLink) {\n        links.push(nextLink);\n      }\n    }\n    links.sort((a, b) => {\n      const aIsOver = a.isOver;\n      const bIsOver = b.isOver;\n\n      if (aIsOver !== bIsOver) {\n        // If it is over, the cost is high.\n        return aIsOver ? 1 : -1;\n      }\n      const aRangeCost = getRangeCost(a.length, rowRange);\n      const bRangeCost = getRangeCost(b.length, rowRange);\n\n      return aRangeCost - bRangeCost || a.cost - b.cost;\n    });\n\n    // It returns the lowest cost link.\n    return links[0];\n  }\n  private _getExpectedRowSize(items: GridItem[]) {\n    const {\n      gap,\n    } = this.options;\n    let containerInlineSize = this.getContainerInlineSize()! - gap * (items.length - 1);\n    let ratioSum = 0;\n    let inlineSum = 0;\n\n    items.forEach((item) => {\n      const inlineSize = item.orgInlineSize;\n      const contentSize = item.orgContentSize;\n\n      if (!inlineSize || !contentSize) {\n        ratioSum += 1;\n        return;\n      }\n      // sum((expect - offset) * ratio) = container inline size\n      const inlineOffset = parseFloat(item.gridData.inlineOffset) || 0;\n      const contentOffset = parseFloat(item.gridData.contentOffset) || 0;\n      const maintainedRatio = contentSize <= contentOffset ? 1\n        : (inlineSize - inlineOffset) / (contentSize - contentOffset);\n\n      ratioSum += maintainedRatio;\n      inlineSum += contentOffset * maintainedRatio;\n      containerInlineSize -= inlineOffset;\n    });\n\n    return ratioSum ? (containerInlineSize + inlineSum) / ratioSum : 0;\n  }\n  private _getExpectedInlineSize(items: GridItem[], rowSize: number) {\n    const {\n      gap,\n    } = this.options;\n    const size = items.reduce((sum, item) => {\n      return sum + getExpectedColumnSize(item, rowSize);\n    }, 0);\n\n    return size ? size + gap * (items.length - 1) : 0;\n  }\n  private _getCost(\n    items: GridItem[],\n    i: number,\n    j: number,\n  ) {\n    const lineItems = items.slice(i, j);\n    const rowSize = this._getExpectedRowSize(lineItems);\n    const [minSize, maxSize] = this._getSizeRange();\n\n    if (this.isCroppedSize) {\n      if (minSize <= rowSize && rowSize <= maxSize) {\n        return 0;\n      }\n      const expectedInlineSize = this._getExpectedInlineSize(\n        lineItems,\n        rowSize < minSize ? minSize : maxSize,\n      );\n\n      return Math.pow(expectedInlineSize - this.getContainerInlineSize(), 2);\n    }\n\n    if (isFinite(maxSize)) {\n      // if this size is not in range, the cost increases sharply.\n      if (rowSize < minSize) {\n        return Math.pow(rowSize - minSize, 2) + Math.pow(maxSize, 2);\n      } else if (rowSize > maxSize) {\n        return Math.pow(rowSize - maxSize, 2) + Math.pow(maxSize, 2);\n      }\n    } else if (rowSize < minSize) {\n      return Math.max(Math.pow(minSize, 2), Math.pow(rowSize, 2)) + Math.pow(maxSize, 2);\n    }\n    // if this size in range, the cost is row\n    return rowSize - minSize;\n  }\n  private _getPath(items: GridItem[]) {\n    const lastNode = items.length;\n    const columnRangeOption = this.options.columnRange;\n    const [minColumn, maxColumn]: number[] = isObject(columnRangeOption)\n      ? columnRangeOption\n      : [columnRangeOption, columnRangeOption];\n\n    const graph = (nodeKey: string) => {\n      const results: { [key: string]: number } = {};\n      const currentNode = parseInt(nodeKey, 10);\n\n      for (let nextNode = Math.min(currentNode + minColumn, lastNode); nextNode <= lastNode; ++nextNode) {\n        if (nextNode - currentNode > maxColumn) {\n          break;\n        }\n        let cost = this._getCost(\n          items,\n          currentNode,\n          nextNode,\n        );\n\n        if (cost < 0 && nextNode === lastNode) {\n          cost = 0;\n        }\n        results[`${nextNode}`] = Math.pow(cost, 2);\n      }\n      return results;\n    };\n    // shortest path for items' total height.\n    return find_path(graph, \"0\", `${lastNode}`);\n  }\n  private _setStyle(\n    items: GridItem[],\n    path: string[],\n    outline: number[] = [],\n    isEndDirection: boolean,\n  ) {\n    const {\n      gap,\n      isCroppedSize,\n      displayedRow,\n    } = this.options;\n    const sizeRange = this._getSizeRange();\n    const startPoint = outline[0] || 0;\n    const containerInlineSize = this.getContainerInlineSize();\n    const groups = splitItems(items, path);\n    let contentPos = startPoint;\n    let displayedSize = 0;\n\n    groups.forEach((groupItems, rowIndex) => {\n      const length = groupItems.length;\n      let rowSize = this._getExpectedRowSize(groupItems);\n      if (isCroppedSize) {\n        rowSize = Math.max(sizeRange[0], Math.min(rowSize, sizeRange[1]));\n      }\n      const expectedInlineSize = this._getExpectedInlineSize(groupItems, rowSize);\n\n      const allGap = gap * (length - 1);\n      const scale = (containerInlineSize - allGap) / (expectedInlineSize - allGap);\n\n      groupItems.forEach((item, i) => {\n        let columnSize = getExpectedColumnSize(item, rowSize);\n\n        const prevItem = groupItems[i - 1];\n        const inlinePos = prevItem\n          ? prevItem.cssInlinePos! + prevItem.cssInlineSize! + gap\n          : 0;\n\n        if (isCroppedSize) {\n          columnSize *= scale;\n        }\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize: columnSize,\n          contentSize: rowSize,\n        });\n      });\n      contentPos += gap + rowSize;\n      if (displayedRow < 0 || rowIndex < displayedRow) {\n        displayedSize = contentPos;\n      }\n    });\n\n    if (isEndDirection) {\n      // previous group's end outline is current group's start outline\n      return {\n        start: [startPoint],\n        end: [displayedSize],\n      };\n    }\n    // always start is lower than end.\n    // contentPos is endPoinnt\n    const height = contentPos - startPoint;\n\n    items.forEach((item) => {\n      item.cssContentPos! -= height;\n    });\n    return {\n      start: [startPoint - height],\n      end: [startPoint], // endPoint - height = startPoint\n    };\n  }\n  public getComputedOutlineLength() {\n    return 1;\n  }\n  public getComputedOutlineSize() {\n    return this.getContainerInlineSize();\n  }\n  private _getRowRange() {\n    const rowRange = this.rowRange;\n    return isObject(rowRange) ? rowRange : [rowRange, rowRange];\n  }\n  private _getColumnRange() {\n    const columnRange = this.columnRange;\n    return isObject(columnRange) ? columnRange : [columnRange, columnRange];\n  }\n  private _getSizeRange() {\n    const sizeRange = this.sizeRange;\n    return isObject(sizeRange) ? sizeRange : [sizeRange, sizeRange];\n  }\n}\n\nexport interface JustifiedGrid extends Properties<typeof JustifiedGrid> {\n}\n\n\n/**\n * The minimum and maximum number of items per line.\n * @ko 한 줄에 들어가는 아이템의 최소, 최대 개수.\n * @name Grid.JustifiedGrid#columnRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"columnRange\"]}\n * @default [1, 8]\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   columnRange: [1, 8],\n * });\n *\n * grid.columnRange = [3, 6];\n * ```\n */\n\n\n/**\n * The minimum and maximum number of rows in a group, 0 is not set.\n * @ko 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다.\n * @name Grid.JustifiedGrid#rowRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"rowRange\"]}\n * @default 0\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   rowRange: 0,\n * });\n *\n * grid.rowRange = [3, 4];\n * ```\n */\n\n/**\n * The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes.\n * @ko 아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다.\n * @name Grid.JustifiedGrid#sizeRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"sizeRange\"]}\n * @default [0, Infinity]\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   sizeRange: [0, Infinity],\n * });\n *\n * grid.sizeRange = [200, 800];\n * ```\n */\n\n/**\n * Maximum number of rows to be counted for container size. You can hide it on the screen by setting overflow: hidden. -1 is not set.\n * @ko - 컨테이너 크기에 계산될 최대 row 개수. overflow: hidden을 설정하면 화면에 가릴 수 있다. -1은 미설정이다.\n * @name Grid.JustifiedGrid#displayedRow\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"displayedRow\"]}\n * @default -1\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   displayedRow: -1,\n * });\n *\n * grid.displayedRow = 3;\n * ```\n */\n\n/**\n * Whether to crop when the row size is out of sizeRange. If set to true, this ratio can be broken.\n * @ko - row 사이즈가 sizeRange에 벗어나면 크롭할지 여부. true로 설정하면 비율이 깨질 수 있다.\n * @name Grid.JustifiedGrid#isCroppedSize\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"isCroppedSize\"]}\n * @default false\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   sizeRange: [200, 250],\n *   isCroppedSize: false,\n * });\n *\n * grid.isCroppedSize = true;\n * ```\n */\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridRect } from \"../types\";\nimport { GetterSetter, range } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\nfunction getMaxPoint(outline: number[]) {\n  let maxPoint = -Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      maxPoint = Math.max(maxPoint, point);\n    }\n  });\n  return isFinite(maxPoint) ? maxPoint : 0;\n}\nfunction getMinPoint(outline: number[]) {\n  let minPoint = Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      minPoint = Math.min(minPoint, point);\n    }\n  });\n  return isFinite(minPoint) ? minPoint : 0;\n}\nfunction getOutlinePoint(startOutline: number[], frameOutline: number[], useFrameFill: boolean) {\n  return getMaxPoint(startOutline)\n    + getOutlineDist(startOutline, frameOutline, useFrameFill);\n}\n\nfunction getOutlineDist(startOutline: number[], endOutline: number[], useFrameFill: boolean) {\n  const length = startOutline.length;\n\n  if (!length) {\n    return 0;\n  }\n  const minEndPoint = getMinPoint(endOutline);\n  const maxStartPoint = getMaxPoint(startOutline);\n  let frameDist = 0;\n\n  if (!useFrameFill) {\n    return 0;\n  }\n\n\n  for (let outlineIndex = 0; outlineIndex < length; ++outlineIndex) {\n    const startPoint = startOutline[outlineIndex];\n    const endPoint = endOutline[outlineIndex];\n\n    if (!isFinite(startPoint) || !isFinite(endPoint)) {\n      continue;\n    }\n    const startPos = startPoint - maxStartPoint;\n    const endPos = endPoint - minEndPoint;\n\n\n    // Fill empty block.\n    frameDist = outlineIndex ? Math.max(frameDist, frameDist + startPos - endPos) : startPos - endPos;\n  }\n\n  return frameDist;\n}\nfunction fillOutlines(startOutline: number[], endOutline: number[], rect: {\n  inlinePos: number;\n  inlineSize: number;\n  contentPos: number;\n  contentSize: number;\n}) {\n  const {\n    inlinePos,\n    inlineSize,\n    contentPos,\n    contentSize,\n  } = rect;\n  for (\n    let outlineIndex = inlinePos;\n    outlineIndex < inlinePos + inlineSize;\n    ++outlineIndex\n  ) {\n    startOutline[outlineIndex] = Math.min(startOutline[outlineIndex], contentPos);\n    endOutline[outlineIndex] = Math.max(endOutline[outlineIndex], contentPos + contentSize);\n  }\n}\nexport interface FrameRect extends Required<GridRect> {\n  type: any;\n}\n/**\n * @typedef\n * @memberof Grid.FrameGrid\n * @extends Grid.GridOptions\n * @property - The shape of the grid. You can set the shape and order of items with a 2d array ([contentPos][inlinePos]). You can place items as many times as you fill the array with numbers, and zeros and spaces are empty spaces. The order of the items is arranged in ascending order of the numeric values that fill the array. (default: [])\n * <ko>Grid의 모양. 2d 배열([contentPos][inlinePos])로 아이템의 모양과 순서를 설정할 수 있다. 숫자로 배열을 채운만큼 아이템을 배치할 수 있으며 0과 공백은 빈 공간이다. 아이템들의 순서는 배열을 채운 숫자값의 오름차순대로 배치가 된다. (default: [])</ko>\n * @property - Make sure that the frame can be attached after the previous frame. (default: true) <ko> 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다.</ko>\n * @property - 1x1 rect size. If it is 0, it is determined by the number of columns in the frame. (default: 0) <ko>1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다. (default: 0)</ko>\n */\nexport interface FrameGridOptions extends GridOptions {\n  frame?: number[][];\n  useFrameFill?: boolean;\n  rectSize?: number | { inlineSize: number, contentSize: number };\n}\n\n/**\n * 'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameGrid is a grid that the item is filled up on the basis of a line given a size.\n * @ko 'Frame'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. FrameGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템이 가득 차도록 배치하는 Grid다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.FrameGrid.FrameGridOptions} options - The option object of the FrameGrid module <ko>FrameGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class FrameGrid extends Grid<FrameGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    frame: PROPERTY_TYPE.RENDER_PROPERTY,\n    useFrameFill: PROPERTY_TYPE.RENDER_PROPERTY,\n    rectSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<FrameGridOptions> = {\n    ...Grid.defaultOptions,\n    frame: [],\n    rectSize: 0,\n    useFrameFill: true,\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const frame = this._getFrame();\n    const {\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      rects: frameRects,\n    } = frame;\n    const {\n      gap,\n      useFrameFill,\n    } = this.options;\n\n    const {\n      inlineSize: rectInlineSize,\n      contentSize: rectContentSize,\n    } = this.getRectSize(frameInlineSize);\n\n\n    const itemsLength = items.length;\n\n    if (!itemsLength || !frameInlineSize || !frameContentSize) {\n      return { start: outline, end: outline };\n    }\n    const rectsLength = frameRects.length;\n    let startOutline = range(frameInlineSize).map(() => Infinity);\n    let endOutline = range(frameInlineSize).map(() => -Infinity);\n    const frameOutline = frame.outline.map((point) => point * (rectContentSize + gap));\n\n    for (let startIndex = 0; startIndex < itemsLength; startIndex += rectsLength) {\n      // Compare group's startOutline and startOutline of rect\n      const startPoint = getOutlinePoint(endOutline, frameOutline, useFrameFill);\n\n      for (let rectIndex = 0; rectIndex < rectsLength && startIndex + rectIndex < itemsLength; ++rectIndex) {\n        const item = items[startIndex + rectIndex];\n        const {\n          contentPos: frameRectContentPos,\n          inlinePos: frameRectInlinePos,\n          contentSize: frameRectContentSize,\n          inlineSize: frameRectInlineSize,\n        } = frameRects[rectIndex];\n        const contentPos = startPoint + frameRectContentPos * (rectContentSize + gap);\n        const inlinePos = frameRectInlinePos * (rectInlineSize + gap);\n        const contentSize = frameRectContentSize * (rectContentSize + gap) - gap;\n        const inlineSize = frameRectInlineSize * (rectInlineSize + gap) - gap;\n\n        fillOutlines(startOutline, endOutline, {\n          inlinePos: frameRectInlinePos,\n          inlineSize: frameRectInlineSize,\n          contentPos: contentPos,\n          contentSize: contentSize + gap,\n        });\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize,\n          contentSize,\n        });\n      }\n    }\n    const isDirectionEnd = direction === \"end\";\n\n    let gridOutline = outline.length ? outline : [0];\n\n    if (gridOutline.length !== frameInlineSize) {\n      const point = isDirectionEnd ? Math.max(...gridOutline) : Math.min(...gridOutline);\n\n      gridOutline = range(frameInlineSize).map(() => point);\n    }\n    startOutline = startOutline.map((point) => isFinite(point) ? point : 0);\n    endOutline = endOutline.map((point) => isFinite(point) ? point : 0);\n    const outlineDist = isDirectionEnd\n      ? getOutlinePoint(gridOutline, startOutline, useFrameFill)\n      : getOutlinePoint(endOutline, gridOutline, useFrameFill);\n\n    items.forEach((item) => {\n      item.cssContentPos! += outlineDist;\n    });\n\n    return {\n      start: startOutline.map((point) => point + outlineDist),\n      end: endOutline.map((point) => point + outlineDist),\n    };\n  }\n  public getComputedOutlineLength() {\n    const frame = this.options.frame;\n\n    return frame.length ? frame[0].length : 0;\n  }\n  public getComputedOutlineSize() {\n    const {\n      gap,\n      rectSize: rectSizeOption,\n    } = this.options;\n\n    if (typeof rectSizeOption === \"object\") {\n      return rectSizeOption.inlineSize;\n    }\n    return rectSizeOption || ((this.getContainerInlineSize()! + gap) / this.getComputedOutlineLength() - gap);\n  }\n  protected getRectSize(frameInlineSize: number) {\n    const {\n      gap,\n      rectSize: rectSizeOption,\n    } = this.options;\n\n    if (typeof rectSizeOption === \"object\") {\n      return rectSizeOption;\n    }\n    const rectSizeValue = rectSizeOption\n      ? rectSizeOption\n      : (this.getContainerInlineSize()! + gap) / frameInlineSize - gap;\n\n    return { inlineSize: rectSizeValue, contentSize: rectSizeValue };\n  }\n  private _getFrame() {\n    const frame = this.options.frame;\n    const frameContentSize = frame.length;\n    const frameInlineSize = frameContentSize ? frame[0].length : 0;\n    const rects: FrameRect[] = [];\n    const passMap: Record<string, boolean> = {};\n    const startOutline = range(frameInlineSize).map(() => Infinity);\n    const endOutline = range(frameInlineSize).map(() => -Infinity);\n\n    for (let y1 = 0; y1 < frameContentSize; ++y1) {\n      for (let x1 = 0; x1 < frameInlineSize; ++x1) {\n        const type = frame[y1][x1];\n\n        if (!type) {\n          continue;\n        }\n        if (passMap[`${y1},${x1}`]) {\n          continue;\n        }\n        const rect = this._findRect(passMap, type, y1, x1, frameInlineSize, frameContentSize);\n\n        fillOutlines(startOutline, endOutline, rect);\n        rects.push(rect);\n      }\n    }\n    rects.sort((a, b) => (a.type < b.type ? -1 : 1));\n\n\n    return {\n      rects,\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      outline: startOutline,\n    };\n  }\n  private _findRect(\n    passMap: Record<string, boolean>,\n    type: number,\n    y1: number,\n    x1: number,\n    frameInlineSize: number,\n    frameContentSize: number,\n  ) {\n    const frame = this.options.frame;\n\n    let contentSize = 1;\n    let inlineSize = 1;\n\n    // find rect\n    for (let x2 = x1; x2 < frameInlineSize; ++x2) {\n      if (frame[y1][x2] === type) {\n        inlineSize = x2 - x1 + 1;\n        continue;\n      }\n      break;\n    }\n    for (let y2 = y1; y2 < frameContentSize; ++y2) {\n      if (frame[y2][x1] === type) {\n        contentSize = y2 - y1 + 1;\n        continue;\n      }\n      break;\n    }\n\n    // pass rect\n    for (let y = y1; y < y1 + contentSize; ++y) {\n      for (let x = x1; x < x1 + inlineSize; ++x) {\n        passMap[`${y},${x}`] = true;\n      }\n    }\n\n    const rect: FrameRect = {\n      type,\n      inlinePos: x1,\n      contentPos: y1,\n      inlineSize,\n      contentSize,\n    };\n    return rect;\n  }\n}\n\nexport interface FrameGrid extends Properties<typeof FrameGrid> {\n}\n\n\n/**\n * The shape of the grid. You can set the shape and order of items with a 2d array ([contentPos][inlinePos]). You can place items as many times as you fill the array with numbers, and zeros and spaces are empty spaces. The order of the items is arranged in ascending order of the numeric values that fill the array.\n * @ko Grid의 모양. 2d 배열([contentPos][inlinePos])로 아이템의 모양과 순서를 설정할 수 있다. 숫자로 배열을 채운만큼 아이템을 배치할 수 있으며 0과 공백은 빈 공간이다. 아이템들의 순서는 배열을 채운 숫자값의 오름차순대로 배치가 된다.\n * @name Grid.FrameGrid#frame\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"frame\"]}\n * @default []\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * // Item 1 : 2 x 2\n * // Item 2 : 1 x 1\n * // Item 3 : 1 x 2\n * // Item 4 : 1 x 1\n * // Item 5 : 2 x 1\n * const grid = new FrameGrid(container, {\n *   frame: [\n *     [1, 1, 0, 0, 2, 3],\n *     [1, 1, 0, 4, 5, 5],\n *   ],\n * });\n *\n * // Item 1 : 2 x 2\n * // Item 2 : 2 x 2\n * grid.frame = [\n *   [1, 1, 0, 0, 2, 2],\n *   [1, 1, 0, 0, 2, 2],\n * ];\n * ```\n */\n\n/**\n * Make sure that the frame can be attached after the previous frame.\n * @ko 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다.\n * @name Grid.FrameGrid#useFrameFill\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"useFrameFill\"]}\n * @default true\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   useFrameFill: true,\n * });\n *\n * grid.useFrameFill = false;\n * ```\n */\n\n/**\n * 1x1 rect size. If it is 0, it is determined by the number of columns in the frame. (default: 0)\n * @ko 1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다. (default: 0)\n * @name Grid.FrameGrid#rectSize\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"rectSize\"]}\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   rectSize: 0,\n * });\n *\n * grid.rectSize = { inlineSize: 100, contentSize: 150 };\n * ```\n */\n","export interface BoxModelStatus {\n  orgInlineSize: number;\n  orgContentSize: number;\n  inlineSize: number;\n  contentSize: number;\n  inlinePos: number;\n  contentPos: number;\n  items: BoxModel[];\n}\n\nexport default class BoxModel implements BoxModelStatus {\n  public orgInlineSize: number;\n  public orgContentSize: number;\n  public inlineSize: number;\n  public contentSize: number;\n  public inlinePos: number;\n  public contentPos: number;\n  public items: BoxModel[];\n  constructor(status: Partial<BoxModelStatus>) {\n    const boxStatus = {\n      orgInlineSize: 0,\n      orgContentSize: 0,\n      inlineSize: 0,\n      contentSize: 0,\n      inlinePos: 0,\n      contentPos: 0,\n      items: [],\n      ...status,\n    };\n    for (const name in boxStatus) {\n      this[name] = boxStatus[name];\n    }\n  }\n  public scaleTo(inlineSize: number, contentSize: number) {\n    const scaleX = this.inlineSize ? inlineSize / this.inlineSize : 0;\n    const scaleY = this.contentSize ? contentSize / this.contentSize : 0;\n\n    this.items.forEach((item) => {\n      if (scaleX !== 0) {\n        item.inlinePos *= scaleX;\n        item.inlineSize *= scaleX;\n      }\n      if (scaleY !== 0) {\n        item.contentPos *= scaleY;\n        item.contentSize *= scaleY;\n      }\n    });\n\n    this.inlineSize = inlineSize;\n    this.contentSize = contentSize;\n  }\n  public push(item: BoxModel) {\n    this.items.push(item);\n  }\n  public getOrgSizeWeight() {\n    return this.orgInlineSize * this.orgContentSize;\n  }\n  public getSize() {\n    return this.inlineSize * this.contentSize;\n  }\n  public getOrgRatio() {\n    return (this.orgContentSize === 0) ? 0 : this.orgInlineSize / this.orgContentSize;\n  }\n  public getRatio() {\n    return (this.contentSize === 0) ? 0 : this.inlineSize / this.contentSize;\n  }\n}\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines } from \"../types\";\nimport { GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\nimport BoxModel from \"./lib/BoxModel\";\n\n\nfunction getCost(originLength: number, length: number) {\n  let cost = originLength / length;\n\n  if (cost < 1) {\n    cost = 1 / cost;\n  }\n\n  return cost - 1;\n}\nfunction fitArea(\n  item: BoxModel,\n  bestFitArea: BoxModel,\n  itemFitSize: { inlineSize: number, contentSize: number },\n  containerFitSize: { inlineSize: number, contentSize: number },\n  isContentDirection: boolean,\n) {\n  item.contentSize = itemFitSize.contentSize;\n  item.inlineSize = itemFitSize.inlineSize;\n  bestFitArea.contentSize = containerFitSize.contentSize;\n  bestFitArea.inlineSize = containerFitSize.inlineSize;\n\n  if (isContentDirection) {\n    item.contentPos = bestFitArea.contentPos + bestFitArea.contentSize;\n    item.inlinePos = bestFitArea.inlinePos;\n  } else {\n    item.inlinePos = bestFitArea.inlinePos + bestFitArea.inlineSize;\n    item.contentPos = bestFitArea.contentPos;\n  }\n}\n\n\n/**\n * @typedef\n * @memberof Grid.PackingGrid\n * @extends Grid.GridOptions\n * @property - The aspect ratio (inlineSize / contentSize) of the container with items. (default: 1) <ko>아이템들을 가진 컨테이너의 종횡비(inlineSize / contentSize). (default: 1)</ko>\n * @property - The size weight when placing items. (default: 1)<ko>아이템들을 배치하는데 사이즈 가중치. (default: 1)</ko>\n * @property - The weight to keep ratio when placing items. (default: 1)<ko>아이템들을 배치하는데 비율을 유지하는 가중치. (default: 1)</ko>\n * @property - The priority that determines the weight of the item. (default: \"custom\"), \"size\" = (sizeWieght: 100, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 100), \"custom\" = (set sizeWeight, ratioWeight)\n * item's weight = item's ratio(inlineSize / contentSize) change * `ratioWeight` + size(inlineSize * contentSize) change * `sizeWeight`.\n * <ko> 아이템의 가중치를 결정하는 우선수치. (default: \"custom\"), \"size\" = (sizeWieght: 100, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 100), \"custom\" = (set sizeWeight, ratioWeight). 아이템의 가중치 = ratio(inlineSize / contentSize)의 변화량 * `ratioWeight` + size(inlineSize * contentSize)의 변화량 * `sizeWeight`.</ko>\n */\nexport interface PackingGridOptions extends GridOptions {\n  aspectRatio?: number;\n  sizeWeight?: number;\n  ratioWeight?: number;\n  weightPriority?: \"size\" | \"ratio\" | \"custom\";\n}\n\n/**\n * The PackingGrid is a grid that shows the important items bigger without sacrificing the weight of the items.\n * Rows and columns are separated so that items are dynamically placed within the horizontal and vertical space rather than arranged in an orderly fashion.\n * If `sizeWeight` is higher than `ratioWeight`, the size of items is preserved as much as possible.\n * Conversely, if `ratioWeight` is higher than `sizeWeight`, the ratio of items is preserved as much as possible.\n * @ko PackingGrid는 아이템의 본래 크기에 따른 비중을 해치지 않으면서 중요한 카드는 더 크게 보여 주는 레이아웃이다.\n * 행과 열이 구분돼 아이템을 정돈되게 배치하는 대신 가로세로 일정 공간 내에서 동적으로 아이템을 배치한다.\n * `sizeWeight`가 `ratioWeight`보다 높으면 아이템들의 size가 최대한 보존이 된다.\n * 반대로 `ratioWeight`가 `sizeWeight`보다 높으면 아이템들의 비율이 최대한 보존이 된다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.PackingGrid.PackingGridOptions} options - The option object of the PackingGrid module <ko>PackingGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class PackingGrid extends Grid<PackingGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    aspectRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n    ratioWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n    weightPriority: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<PackingGridOptions> = {\n    ...Grid.defaultOptions,\n    aspectRatio: 1,\n    sizeWeight: 1,\n    ratioWeight: 1,\n    weightPriority: \"custom\",\n  };\n\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const { aspectRatio, gap } = this.options;\n    const containerInlineSize = this.getContainerInlineSize();\n    const containerContentSize = containerInlineSize / aspectRatio;\n    const prevOutline = outline.length ? outline : [0];\n    const startPoint = direction === \"end\"\n      ? Math.max(...prevOutline)\n      : Math.min(...prevOutline) - containerContentSize - gap;\n    const endPoint = startPoint + containerContentSize + gap;\n    const container = new BoxModel({});\n\n    items.forEach((item) => {\n      const model = new BoxModel({\n        inlineSize: item.orgInlineSize,\n        contentSize: item.orgContentSize,\n        orgInlineSize: item.orgInlineSize,\n        orgContentSize: item.orgContentSize,\n      });\n\n      this._findBestFitArea(container, model);\n      container.push(model);\n      container.scaleTo(containerInlineSize + gap, containerContentSize + gap);\n    });\n    items.forEach((item, i) => {\n      const boxItem = container.items[i];\n      const inlineSize = boxItem.inlineSize - gap;\n      const contentSize = boxItem.contentSize - gap;\n      const contentPos = startPoint + boxItem.contentPos;\n      const inlinePos = boxItem.inlinePos;\n\n      item.setCSSGridRect({\n        inlinePos,\n        contentPos,\n        inlineSize,\n        contentSize,\n      });\n    });\n\n    return {\n      start: [startPoint],\n      end: [endPoint],\n    };\n  }\n  private _findBestFitArea(container: BoxModel, item: BoxModel) {\n    if (container.getRatio() === 0) { // 아이템 최초 삽입시 전체영역 지정\n      container.orgInlineSize = item.inlineSize;\n      container.orgContentSize = item.contentSize;\n      container.inlineSize = item.inlineSize;\n      container.contentSize = item.contentSize;\n      return;\n    }\n\n    let bestFitArea!: BoxModel;\n    let minCost = Infinity;\n    let isContentDirection = false;\n    const itemFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const containerFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const sizeWeight = this._getWeight(\"size\");\n    const ratioWeight = this._getWeight(\"ratio\");\n\n    container.items.forEach((child) => {\n      const containerSizeCost = getCost(child.getOrgSizeWeight(), child.getSize()) * sizeWeight;\n      const containerRatioCost = getCost(child.getOrgRatio(), child.getRatio()) * ratioWeight;\n      const inlineSize = child.inlineSize;\n      const contentSize = child.contentSize;\n      for (let i = 0; i < 2; ++i) {\n        let itemInlineSize;\n        let itemContentSize;\n        let containerInlineSize;\n        let containerContentSize;\n\n        if (i === 0) {\n          // add item to content pos (top, bottom)\n          itemInlineSize = inlineSize;\n          itemContentSize = contentSize * (item.contentSize / (child.orgContentSize + item.contentSize));\n          containerInlineSize = inlineSize;\n          containerContentSize = contentSize - itemContentSize;\n        } else {\n          // add item to inline pos (left, right)\n          itemContentSize = contentSize;\n          itemInlineSize = inlineSize * (item.inlineSize / (child.orgInlineSize + item.inlineSize));\n          containerContentSize = contentSize;\n          containerInlineSize = inlineSize - itemInlineSize;\n        }\n\n        const itemSize = itemInlineSize * itemContentSize;\n        const itemRatio = itemInlineSize / itemContentSize;\n        const containerSize = containerInlineSize * containerContentSize;\n        const containerRatio = containerContentSize / containerContentSize;\n\n        let cost = getCost(item.getSize(), itemSize) * sizeWeight;\n        cost += getCost(item.getRatio(), itemRatio) * ratioWeight;\n        cost += getCost(child.getOrgSizeWeight(), containerSize) * sizeWeight - containerSizeCost;\n        cost += getCost(child.getOrgRatio(), containerRatio) * ratioWeight - containerRatioCost;\n\n        if (cost === Math.min(cost, minCost)) {\n          minCost = cost;\n          bestFitArea = child;\n          isContentDirection = (i === 0);\n          itemFitSize.inlineSize = itemInlineSize;\n          itemFitSize.contentSize = itemContentSize;\n          containerFitSize.inlineSize = containerInlineSize;\n          containerFitSize.contentSize = containerContentSize;\n        }\n      }\n    });\n\n    fitArea(item, bestFitArea, itemFitSize, containerFitSize, isContentDirection);\n  }\n  public getComputedOutlineLength() {\n    return 1;\n  }\n  public getComputedOutlineSize() {\n    return this.getContainerInlineSize();\n  }\n  private _getWeight(type: \"size\" | \"ratio\"): number {\n    const options = this.options;\n    const weightPriority = options.weightPriority;\n\n    if (weightPriority === type) {\n      return 100;\n    } else if (weightPriority === \"custom\") {\n      return options[`${type}Weight`];\n    }\n    return 1;\n  }\n}\n\nexport interface PackingGrid extends Properties<typeof PackingGrid> {\n}\n\n\n/**\n * The aspect ratio (inlineSize / contentSize) of the container with items.\n * @ko 아이템들을 가진 컨테이너의 종횡비(inlineSize / contentSize).\n * @name Grid.PackingGrid#aspectRatio\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"aspectRatio\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   aspectRatio: 1,\n * });\n *\n * grid.aspectRatio = 1.5;\n * ```\n */\n\n/**\n * The priority that determines the weight of the item. \"size\" = (sizeWieght: 2, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 2), \"custom\" = (set sizeWeight, ratioWeight)\n * item's weight = item's ratio(inlineSize / contentSize) change * `ratioWeight` + size(inlineSize * contentSize) change * `sizeWeight`.\n * @ko 아이템의 가중치를 결정하는 우선수치. \"size\" = (sizeWieght: 2, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 2), \"custom\" = (set sizeWeight, ratioWeight). 아이템의 가중치 = ratio(inlineSize / contentSize)의 변화량 * `ratioWeight` + size(inlineSize * contentSize)의 변화량 * `sizeWeight`.\n * @name Grid.PackingGrid#weightPriority\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"weightPriority\"]}\n * @default \"custom\"\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   weightPriority: \"custom\",\n *   sizeWeight: 1,\n *   ratioWeight: 1,\n * });\n *\n * grid.weightPriority = \"size\";\n * // or\n * grid.weightPriority = \"ratio\";\n * ```\n */\n\n/**\n * The size weight when placing items.\n * @ko 아이템들을 배치하는데 사이즈 가중치.\n * @name Grid.PackingGrid#sizeWeight\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"sizeWeight\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   sizeWeight: 1,\n * });\n *\n * grid.sizeWeight = 10;\n * ```\n */\n\n\n/**\n * The weight to keep ratio when placing items.\n * @ko 아이템들을 배치하는데 비율을 유지하는 가중치.\n * @name Grid.PackingGrid#ratioWeight\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"ratioWeight\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   ratioWeight: 1,\n * });\n *\n * grid.ratioWeight = 10;\n * ```\n */\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"./Grid\";\n\nexport * from \"./grids/MasonryGrid\";\nexport * from \"./grids/JustifiedGrid\";\nexport * from \"./grids/FrameGrid\";\nexport * from \"./grids/PackingGrid\";\nexport * from \"./ItemRenderer\";\nexport * from \"./types\";\nexport * from \"./Grid\";\nexport * from \"./GridItem\";\nexport * from \"./ContainerManager\";\nexport * from \"./ResizeWatcher\";\nexport * from \"./consts\";\nexport {\n  GetterSetter,\n  withGridMethods,\n  withMethods,\n  getMountedElements,\n  getUpdatedItems,\n} from \"./utils\";\nexport default Grid;\n","import Grid, * as modules from './index';\n\nfor (const name in modules) {\n  (Grid as any)[name] = (modules as any)[name];\n}\n\ndeclare const module: any;\nmodule.exports = Grid;\nexport default Grid;\nexport * from './index';\n"],"names":["DEFAULT_GRID_OPTIONS","horizontal","useTransform","percentage","isEqualSize","isConstantSize","gap","attributePrefix","resizeDebounce","maxResizeDebounce","autoResize","preserveUIOnDestroy","defaultDirection","externalContainerManager","externalItemRenderer","renderOnPropertyChange","useFit","outlineLength","outlineSize","useRoundedSize","useResizeObserver","observeChildren","PROPERTY_TYPE","MOUNT_STATE","UPDATE_STATE","GRID_PROPERTY_TYPES","RENDER_PROPERTY","PROPERTY","GRID_METHODS","GRID_EVENTS","RECT_NAMES","inlinePos","contentPos","inlineSize","contentSize","vertical","getKeys","obj","Object","keys","getUpdatedItems","items","entries","mountedItems","getMountedItems","diff","map","entry","target","item","element","maintained","filter","_a","prevIndex","nextIndex","entrySize","size","computedInlineSize","blockSize","computedContentSize","getMountedElements","isString","val","isObject","isNumber","camelize","str","replace","all","letter","toUpperCase","getDataAttributes","dataAttributes","attributes","length","i","attribute","name","value","indexOf","GetterSetter","component","prototype","propertyTypes","shouldRender","descriptor","getOwnPropertyDescriptor","getter","get","options","setter","set","prevValue","scheduleRender","enumerable","configurable","defineProperty","withMethods","methods","memberName","forEach","_i","args","result","range","arr","push","getRangeCost","valueRange","Math","max","withGridMethods","container","width","height","_this","_scheduleResize","_options","containerRectBox","rectBox","childrenRectBox","sizes","borderBoxSize","contentBoxSize","contentRect","updatedEntries","_updatedEntries","index","lastIndexOf","_maxResizeDebounceTimer","window","setTimeout","_onResize","_resizeTimer","clearTimeout","updated","containerEntry","childEntries","isResizeChildren","isResizeContainer","watchDirection","prevRect","rect","containerEntrySize","setRect","resize","isWatchWidth","isWatchHeight","_emitter","trigger","useWindowResize","document","querySelector","_init","offsetWidth","offsetHeight","clientWidth","clientHeight","children","observer","_observer","box","observe","unobserve","callback","on","disconnect","removeEventListener","_onWindowResize","Component","ResizeObserver","_onObserve","addEventListener","__extends","_super","e","_watcher","getRect","unobserveChildren","_names","status","setContentSize","getContentSize","sizeName","style","destroy","preserveUI","cssText","orgCSSText","getComputedStyle","position","ResizeWatcher","listen","initialRect","_renderItem","containerRect","_updateItem","sizePercentage","posPercentage","posPercetage","sizePercetage","orgRect","isLoading","updateState","WAIT_LOADING","hasOrgSize","left","offsetLeft","top","offsetTop","clientRect","getBoundingClientRect","isFirstUpdate","mountState","MOUNTED","NEED_UPDATE","UPDATED","cssRect","cssTexts","_b","posName","getInlineSize","key","join","itemStatus","data","UNCHECKED","gridData","gridRect","names","containerElement","start","end","_renderItems","useResize","updatedItems","updateItems","constructor","defaultOptions","containerManager","ContainerManager","itemRenderer","ItemRenderer","Grid","slice","call","outlines","elements","getChildren","added","changed","removed","nextItems","beforeIndex","afterIndex","GridItem","setItems","renderItems","useOrgResize","checkReady","minimize","getMinimizedStatus","getStatus","prevInlineSize","setStatus","_renderComplete","direction","mounted","isResize","getContainerInlineSize","_im","parentNode","moreUpdated","hasTransition","transitionDuration","parseFloat","ImReady","prefix","hasCSSSize","readyItems","isPreReadyOver","update","check","_clearRenderTimer","_renderTimer","startOutline","endOutline","outlineOffset","min","point","cssContentPos","prevOutlines","prevOutline","outline","nextOutlines","isUpdate","applyGrid","setOutlines","fitOutlines","_refreshContainerContentSize","transitionMounted","endPoint","startPoint","setContainerRect","_resizeContainer","isTrusted","getItems","syncElements","getColumnPoint","columnIndex","columnCount","pointCaculationName","getColumnIndex","nearestCalculationName","indexCaculationName","points","columnSize","getComputedOutlineSize","column","getComputedOutlineLength","align","columnSizeRatio","itemsLength","alignPoses","_getAlignPoses","isEndDirection","pointCalculationName","point_1","columnDist","isStretch","columnAttribute","parseInt","maxColumnAttribute","maxColumn","ceil","maxColumnCount","nextEndColumnIndex","nextColumnIndex","cssInlineSize","cssContentSize","cssInlinePos","nextOutlinePoint","indexOffset","containerInlineSize","columnSizeOption","columnOption","maxStretchColumnSize","Infinity","checkedItem","items_1","columnCalculationThreshold","floor","containerSize","indexes","offset","dist","countDist","totalColumnSize","MasonryGrid","single_source_shortest_paths","graph","s","d","predecessors","costs","open","BinaryHeap","x","cost","closest","u","cost_of_s_to_u","adjacent_nodes","cost_of_e","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","first_visit","pop","v","msg","Error","extract_shortest_path_from_predecessor_list","nodes","reverse","find_path","scoreFunction","content","bubbleUp","sinkDown","_n","n","parentN","parent","elemScore","child1Score","child2N","child1N","swap","child1","child2","child2Score","splitItems","path","groups","path1","path2","getExpectedColumnSize","rowSize","orgInlineSize","orgContentSize","inlineOffset","contentOffset","ratio","maintainedTarget","widthOffset","scrollWidth","heightOffset","scrollHeight","rowRange","_getRowPath","_getPath","_setStyle","columnRange","_getColumnRange","_getRowRange","pathLink","_getRowLink","currentNode","node","currentLink","minColumn","minRow","maxRow","lastNode","pathLength","rangeCost","lastCost","abs","_getCost","isOver","_searchRowLink","links","nextNode","nextCost","nextLink","sort","a","b","aIsOver","bIsOver","aRangeCost","bRangeCost","ratioSum","inlineSum","maintainedRatio","reduce","sum","j","lineItems","_getExpectedRowSize","_getSizeRange","minSize","maxSize","isCroppedSize","expectedInlineSize","_getExpectedInlineSize","pow","isFinite","columnRangeOption","nodeKey","results","displayedRow","sizeRange","displayedSize","groupItems","rowIndex","allGap","scale","prevItem","setCSSGridRect","JustifiedGrid","getMaxPoint","maxPoint","getMinPoint","minPoint","getOutlinePoint","frameOutline","useFrameFill","getOutlineDist","minEndPoint","maxStartPoint","frameDist","outlineIndex","startPos","endPos","fillOutlines","frame","_getFrame","frameInlineSize","frameContentSize","frameRects","getRectSize","rectInlineSize","rectContentSize","rectsLength","startIndex","rectIndex","_c","frameRectContentPos","frameRectInlinePos","frameRectContentSize","frameRectInlineSize","isDirectionEnd","gridOutline","outlineDist","rectSizeOption","rectSizeValue","rects","passMap","y1","x1","type","_findRect","x2","y2","y","FrameGrid","rectSize","boxStatus","scaleX","scaleY","getCost","originLength","fitArea","bestFitArea","itemFitSize","containerFitSize","isContentDirection","aspectRatio","containerContentSize","BoxModel","model","_findBestFitArea","scaleTo","boxItem","getRatio","minCost","sizeWeight","_getWeight","ratioWeight","child","containerSizeCost","getOrgSizeWeight","getSize","containerRatioCost","getOrgRatio","itemInlineSize","itemContentSize","itemSize","itemRatio","containerRatio","weightPriority","PackingGrid","modules","module","exports"],"mappings":"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"}